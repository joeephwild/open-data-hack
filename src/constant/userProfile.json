{
  "address": "0x9b5ADa1E46C1A285FCD5F56745f8287d4DE0873f",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chainid",
          "type": "uint256"
        }
      ],
      "name": "ChainNotSupported",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "_mentorTableId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_studentTableId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "details",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "languages",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "availability",
          "type": "string[]"
        }
      ],
      "name": "addMentor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "nickname",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "additionalInfo",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "profileImage",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "coverImage",
          "type": "string"
        }
      ],
      "name": "addStudent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "items",
          "type": "string[]"
        }
      ],
      "name": "concatArray",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string[]",
          "name": "details",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "languages",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "availability",
          "type": "string[]"
        }
      ],
      "name": "concatWriteQuery",
      "outputs": [
        {
          "internalType": "string",
          "name": "queryString",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createMentorTable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createStudentTable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe218c59d60b250082adb57397c858ec842a34778f7b5167194d28f5cad1ac9b5",
  "receipt": {
    "to": null,
    "from": "0xb84bc4615C26631dc13b319133E2d4bF6382Fd65",
    "contractAddress": "0x9b5ADa1E46C1A285FCD5F56745f8287d4DE0873f",
    "transactionIndex": 0,
    "gasUsed": "144314116",
    "logsBloom": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
    "blockHash": "0x027ee46d37e1ab7fa1531eae18da367a4e12761e8936c2895fe158140a905ae0",
    "transactionHash": "0xe218c59d60b250082adb57397c858ec842a34778f7b5167194d28f5cad1ac9b5",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 941883,
        "transactionHash": "0xe218c59d60b250082adb57397c858ec842a34778f7b5167194d28f5cad1ac9b5",
        "address": "0x030BCf3D50cad04c2e57391B12740982A9308621",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009b5ada1e46c1a285fcd5f56745f8287d4de0873f",
          "0x0000000000000000000000000000000000000000000000000000000000000189"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x027ee46d37e1ab7fa1531eae18da367a4e12761e8936c2895fe158140a905ae0"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 941883,
        "transactionHash": "0xe218c59d60b250082adb57397c858ec842a34778f7b5167194d28f5cad1ac9b5",
        "address": "0x030BCf3D50cad04c2e57391B12740982A9308621",
        "topics": [
          "0xfe0c067afc4fe17adcf4cfa139aabad6dc30dd86dfe39fb2b858961637156cdd"
        ],
        "data": "0x0000000000000000000000009b5ada1e46c1a285fcd5f56745f8287d4de0873f0000000000000000000000000000000000000000000000000000000000000189000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c0435245415445205441424c45206d656e746f725461626c655f333134313539286d656e746f72496420696e7465676572207072696d617279206b65792c6e616d6520746578742c6e69636b6e616d6520746578742c657870657269656e636520746578742c6c616e67756167657320746578745b5d2c617661696c6162696c69747920746578745b5d2c6164646974696f6e616c496e666f20746578742c70726f66696c65496d61676520746578742c636f766572496d616765207465787429",
        "logIndex": 1,
        "blockHash": "0x027ee46d37e1ab7fa1531eae18da367a4e12761e8936c2895fe158140a905ae0"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 941883,
        "transactionHash": "0xe218c59d60b250082adb57397c858ec842a34778f7b5167194d28f5cad1ac9b5",
        "address": "0x030BCf3D50cad04c2e57391B12740982A9308621",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009b5ada1e46c1a285fcd5f56745f8287d4de0873f",
          "0x000000000000000000000000000000000000000000000000000000000000018a"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x027ee46d37e1ab7fa1531eae18da367a4e12761e8936c2895fe158140a905ae0"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 941883,
        "transactionHash": "0xe218c59d60b250082adb57397c858ec842a34778f7b5167194d28f5cad1ac9b5",
        "address": "0x030BCf3D50cad04c2e57391B12740982A9308621",
        "topics": [
          "0xfe0c067afc4fe17adcf4cfa139aabad6dc30dd86dfe39fb2b858961637156cdd"
        ],
        "data": "0x0000000000000000000000009b5ada1e46c1a285fcd5f56745f8287d4de0873f000000000000000000000000000000000000000000000000000000000000018a0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000008d435245415445205441424c452073747564656e745461626c655f3331343135392873747564656e74496420696e7465676572207072696d617279206b65792c6e616d6520746578742c6e69636b6e616d6520746578742c6164646974696f6e616c496e666f20746578742c70726f66696c65496d61676520746578742c636f766572496d61676520746578742900000000000000000000000000000000000000",
        "logIndex": 3,
        "blockHash": "0x027ee46d37e1ab7fa1531eae18da367a4e12761e8936c2895fe158140a905ae0"
      }
    ],
    "blockNumber": 941883,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c35d03230531209f52aad9af119d1ebe",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainid\",\"type\":\"uint256\"}],\"name\":\"ChainNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"_mentorTableId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_studentTableId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"details\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"languages\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"availability\",\"type\":\"string[]\"}],\"name\":\"addMentor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"nickname\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"additionalInfo\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"profileImage\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"coverImage\",\"type\":\"string\"}],\"name\":\"addStudent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"items\",\"type\":\"string[]\"}],\"name\":\"concatArray\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"details\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"languages\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"availability\",\"type\":\"string[]\"}],\"name\":\"concatWriteQuery\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"queryString\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createMentorTable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createStudentTable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"errors\":{\"ChainNotSupported(uint256)\":[{\"notice\":\"Current chain does not have a TablelandTables deployment.\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/userProfile.sol\":\"userProfile\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x67ef46fef257faae47adb630aad49694dda0334e5f7a7c5fb386243b974886b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@tableland/evm/contracts/TablelandPolicy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10 <0.9.0;\\n\\n/**\\n * @dev Object defining how a table can be accessed.\\n */\\nstruct TablelandPolicy {\\n    // Whether or not the table should allow SQL INSERT statements.\\n    bool allowInsert;\\n    // Whether or not the table should allow SQL UPDATE statements.\\n    bool allowUpdate;\\n    // Whether or not the table should allow SQL DELETE statements.\\n    bool allowDelete;\\n    // A conditional clause used with SQL UPDATE and DELETE statements.\\n    // For example, a value of \\\"foo > 0\\\" will concatenate all SQL UPDATE\\n    // and/or DELETE statements with \\\"WHERE foo > 0\\\".\\n    // This can be useful for limiting how a table can be modified.\\n    // Use {Policies-joinClauses} to include more than one condition.\\n    string whereClause;\\n    // A conditional clause used with SQL INSERT statements.\\n    // For example, a value of \\\"foo > 0\\\" will concatenate all SQL INSERT\\n    // statements with a check on the incoming data, i.e., \\\"CHECK (foo > 0)\\\".\\n    // This can be useful for limiting how table data ban be added.\\n    // Use {Policies-joinClauses} to include more than one condition.\\n    string withCheck;\\n    // A list of SQL column names that can be updated.\\n    string[] updatableColumns;\\n}\\n\",\"keccak256\":\"0xc7d5e534ced54e7121ab2fbc268c77c708a3ba16c451bd403ba9789ddf1249c0\",\"license\":\"MIT\"},\"@tableland/evm/contracts/interfaces/ITablelandTables.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10 <0.9.0;\\n\\nimport {TablelandPolicy} from \\\"../TablelandPolicy.sol\\\";\\n\\n/**\\n * @dev Interface of a TablelandTables compliant contract.\\n */\\ninterface ITablelandTables {\\n    /**\\n     * The caller is not authorized.\\n     */\\n    error Unauthorized();\\n\\n    /**\\n     * RunSQL was called with a query length greater than maximum allowed.\\n     */\\n    error MaxQuerySizeExceeded(uint256 querySize, uint256 maxQuerySize);\\n\\n    /**\\n     * @dev Emitted when `owner` creates a new table.\\n     *\\n     * owner - the to-be owner of the table\\n     * tableId - the table id of the new table\\n     * statement - the SQL statement used to create the table\\n     */\\n    event CreateTable(address owner, uint256 tableId, string statement);\\n\\n    /**\\n     * @dev Emitted when a table is transferred from `from` to `to`.\\n     *\\n     * Not emmitted when a table is created.\\n     * Also emitted after a table has been burned.\\n     *\\n     * from - the address that transfered the table\\n     * to - the address that received the table\\n     * tableId - the table id that was transferred\\n     */\\n    event TransferTable(address from, address to, uint256 tableId);\\n\\n    /**\\n     * @dev Emitted when `caller` runs a SQL statement.\\n     *\\n     * caller - the address that is running the SQL statement\\n     * isOwner - whether or not the caller is the table owner\\n     * tableId - the id of the target table\\n     * statement - the SQL statement to run\\n     * policy - an object describing how `caller` can interact with the table (see {TablelandPolicy})\\n     */\\n    event RunSQL(\\n        address caller,\\n        bool isOwner,\\n        uint256 tableId,\\n        string statement,\\n        TablelandPolicy policy\\n    );\\n\\n    /**\\n     * @dev Emitted when a table's controller is set.\\n     *\\n     * tableId - the id of the target table\\n     * controller - the address of the controller (EOA or contract)\\n     */\\n    event SetController(uint256 tableId, address controller);\\n\\n    /**\\n     * @dev Struct containing parameters needed to run a mutating sql statement\\n     *\\n     * tableId - the id of the target table\\n     * statement - the SQL statement to run\\n     *           - the statement type can be any of INSERT, UPDATE, DELETE, GRANT, REVOKE\\n     *\\n     */\\n    struct Statement {\\n        uint256 tableId;\\n        string statement;\\n    }\\n\\n    /**\\n     * @dev Creates a new table owned by `owner` using `statement` and returns its `tableId`.\\n     *\\n     * owner - the to-be owner of the new table\\n     * statement - the SQL statement used to create the table\\n     *           - the statement type must be CREATE\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     */\\n    function create(\\n        address owner,\\n        string memory statement\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev Creates multiple new tables owned by `owner` using `statements` and returns array of `tableId`s.\\n     *\\n     * owner - the to-be owner of the new table\\n     * statements - the SQL statements used to create the tables\\n     *            - each statement type must be CREATE\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     */\\n    function create(\\n        address owner,\\n        string[] calldata statements\\n    ) external payable returns (uint256[] memory);\\n\\n    /**\\n     * @dev Runs a mutating SQL statement for `caller` using `statement`.\\n     *\\n     * caller - the address that is running the SQL statement\\n     * tableId - the id of the target table\\n     * statement - the SQL statement to run\\n     *           - the statement type can be any of INSERT, UPDATE, DELETE, GRANT, REVOKE\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller`\\n     * - `tableId` must exist and be the table being mutated\\n     * - `caller` must be authorized by the table controller\\n     * - `statement` must be less than or equal to 35000 bytes\\n     */\\n    function mutate(\\n        address caller,\\n        uint256 tableId,\\n        string calldata statement\\n    ) external payable;\\n\\n    /**\\n     * @dev Runs an array of mutating SQL statements for `caller`\\n     *\\n     * caller - the address that is running the SQL statement\\n     * statements - an array of structs containing the id of the target table and coresponding statement\\n     *            - the statement type can be any of INSERT, UPDATE, DELETE, GRANT, REVOKE\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller`\\n     * - `tableId` must be the table being muated in each struct's statement\\n     * - `caller` must be authorized by the table controller if the statement is mutating\\n     * - each struct inside `statements` must have a `tableId` that corresponds to table being mutated\\n     * - each struct inside `statements` must have a `statement` that is less than or equal to 35000 bytes after normalization\\n     */\\n    function mutate(\\n        address caller,\\n        ITablelandTables.Statement[] calldata statements\\n    ) external payable;\\n\\n    /**\\n     * @dev Sets the controller for a table. Controller can be an EOA or contract address.\\n     *\\n     * When a table is created, it's controller is set to the zero address, which means that the\\n     * contract will not enforce write access control. In this situation, validators will not accept\\n     * transactions from non-owners unless explicitly granted access with \\\"GRANT\\\" SQL statements.\\n     *\\n     * When a controller address is set for a table, validators assume write access control is\\n     * handled at the contract level, and will accept all transactions.\\n     *\\n     * You can unset a controller address for a table by setting it back to the zero address.\\n     * This will cause validators to revert back to honoring owner and GRANT/REVOKE based write access control.\\n     *\\n     * caller - the address that is setting the controller\\n     * tableId - the id of the target table\\n     * controller - the address of the controller (EOA or contract)\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller` and owner of `tableId`\\n     * - `tableId` must exist\\n     * - `tableId` controller must not be locked\\n     */\\n    function setController(\\n        address caller,\\n        uint256 tableId,\\n        address controller\\n    ) external;\\n\\n    /**\\n     * @dev Returns the controller for a table.\\n     *\\n     * tableId - the id of the target table\\n     */\\n    function getController(uint256 tableId) external returns (address);\\n\\n    /**\\n     * @dev Locks the controller for a table _forever_. Controller can be an EOA or contract address.\\n     *\\n     * Although not very useful, it is possible to lock a table controller that is set to the zero address.\\n     *\\n     * caller - the address that is locking the controller\\n     * tableId - the id of the target table\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller` and owner of `tableId`\\n     * - `tableId` must exist\\n     * - `tableId` controller must not be locked\\n     */\\n    function lockController(address caller, uint256 tableId) external;\\n\\n    /**\\n     * @dev Sets the contract base URI.\\n     *\\n     * baseURI - the new base URI\\n     *\\n     * Requirements:\\n     *\\n     * - `msg.sender` must be contract owner\\n     */\\n    function setBaseURI(string memory baseURI) external;\\n\\n    /**\\n     * @dev Pauses the contract.\\n     *\\n     * Requirements:\\n     *\\n     * - `msg.sender` must be contract owner\\n     * - contract must be unpaused\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @dev Unpauses the contract.\\n     *\\n     * Requirements:\\n     *\\n     * - `msg.sender` must be contract owner\\n     * - contract must be paused\\n     */\\n    function unpause() external;\\n}\\n\",\"keccak256\":\"0x1fac08244133826a1c5e745783c4280ba002d6b828eb16d3750d4d5e29afccbb\",\"license\":\"MIT\"},\"@tableland/evm/contracts/utils/SQLHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10 <0.9.0;\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/**\\n * @dev Library of helpers for generating SQL statements from common parameters.\\n */\\nlibrary SQLHelpers {\\n    /**\\n     * @dev Generates a properly formatted table name from a prefix and table id.\\n     *\\n     * prefix - the user generated table prefix as a string\\n     * tableId - the Tableland generated tableId as a uint256\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toNameFromId(\\n        string memory prefix,\\n        uint256 tableId\\n    ) internal view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    prefix,\\n                    \\\"_\\\",\\n                    Strings.toString(block.chainid),\\n                    \\\"_\\\",\\n                    Strings.toString(tableId)\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Generates a CREATE statement based on a desired schema and table prefix.\\n     *\\n     * schema - a comma seperated string indicating the desired prefix. Example: \\\"int id, text name\\\"\\n     * prefix - the user generated table prefix as a string\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toCreateFromSchema(\\n        string memory schema,\\n        string memory prefix\\n    ) internal view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"CREATE TABLE \\\",\\n                    prefix,\\n                    \\\"_\\\",\\n                    Strings.toString(block.chainid),\\n                    \\\"(\\\",\\n                    schema,\\n                    \\\")\\\"\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Generates an INSERT statement based on table prefix, tableId, columns, and values.\\n     *\\n     * prefix - the user generated table prefix as a string.\\n     * tableId - the Tableland generated tableId as a uint256.\\n     * columns - a string encoded ordered list of columns that will be updated. Example: \\\"name, age\\\".\\n     * values - a string encoded ordered list of values that will be inserted wrapped in parentheses. Example: \\\"'jerry', 24\\\". Values order must match column order.\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toInsert(\\n        string memory prefix,\\n        uint256 tableId,\\n        string memory columns,\\n        string memory values\\n    ) internal view returns (string memory) {\\n        string memory name = toNameFromId(prefix, tableId);\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"INSERT INTO \\\",\\n                    name,\\n                    \\\"(\\\",\\n                    columns,\\n                    \\\")VALUES(\\\",\\n                    values,\\n                    \\\")\\\"\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Generates an INSERT statement based on table prefix, tableId, columns, and values.\\n     *\\n     * prefix - the user generated table prefix as a string.\\n     * tableId - the Tableland generated tableId as a uint256.\\n     * columns - a string encoded ordered list of columns that will be updated. Example: \\\"name, age\\\".\\n     * values - an array where each item is a string encoded ordered list of values.\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toBatchInsert(\\n        string memory prefix,\\n        uint256 tableId,\\n        string memory columns,\\n        string[] memory values\\n    ) internal view returns (string memory) {\\n        string memory name = toNameFromId(prefix, tableId);\\n        string memory insert = string(\\n            abi.encodePacked(\\\"INSERT INTO \\\", name, \\\"(\\\", columns, \\\")VALUES\\\")\\n        );\\n        for (uint256 i = 0; i < values.length; i++) {\\n            if (i == 0) {\\n                insert = string(abi.encodePacked(insert, \\\"(\\\", values[i], \\\")\\\"));\\n            } else {\\n                insert = string(abi.encodePacked(insert, \\\",(\\\", values[i], \\\")\\\"));\\n            }\\n        }\\n        return insert;\\n    }\\n\\n    /**\\n     * @dev Generates an Update statement based on table prefix, tableId, setters, and filters.\\n     *\\n     * prefix - the user generated table prefix as a string\\n     * tableId - the Tableland generated tableId as a uint256\\n     * setters - a string encoded set of updates. Example: \\\"name='tom', age=26\\\"\\n     * filters - a string encoded list of filters or \\\"\\\" for no filters. Example: \\\"id<2 and name!='jerry'\\\"\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toUpdate(\\n        string memory prefix,\\n        uint256 tableId,\\n        string memory setters,\\n        string memory filters\\n    ) internal view returns (string memory) {\\n        string memory name = toNameFromId(prefix, tableId);\\n        string memory filter = \\\"\\\";\\n        if (bytes(filters).length > 0) {\\n            filter = string(abi.encodePacked(\\\" WHERE \\\", filters));\\n        }\\n        return\\n            string(abi.encodePacked(\\\"UPDATE \\\", name, \\\" SET \\\", setters, filter));\\n    }\\n\\n    /**\\n     * @dev Generates a Delete statement based on table prefix, tableId, and filters.\\n     *\\n     * prefix - the user generated table prefix as a string.\\n     * tableId - the Tableland generated tableId as a uint256.\\n     * filters - a string encoded list of filters. Example: \\\"id<2 and name!='jerry'\\\".\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toDelete(\\n        string memory prefix,\\n        uint256 tableId,\\n        string memory filters\\n    ) internal view returns (string memory) {\\n        string memory name = toNameFromId(prefix, tableId);\\n        return\\n            string(abi.encodePacked(\\\"DELETE FROM \\\", name, \\\" WHERE \\\", filters));\\n    }\\n\\n    /**\\n     * @dev Add single quotes around a string value\\n     *\\n     * input - any input value.\\n     *\\n     */\\n    function quote(string memory input) internal pure returns (string memory) {\\n        return string(abi.encodePacked(\\\"'\\\", input, \\\"'\\\"));\\n    }\\n}\\n\",\"keccak256\":\"0xcfb69c1bb8dcce6ec512c359fb922db4167a007c8cc8fa84456e4d244afb54e0\",\"license\":\"MIT\"},\"@tableland/evm/contracts/utils/TablelandDeployments.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10 <0.9.0;\\n\\nimport {ITablelandTables} from \\\"../interfaces/ITablelandTables.sol\\\";\\n\\n/**\\n * @dev Helper library for getting an instance of ITablelandTables for the currently executing EVM chain.\\n */\\nlibrary TablelandDeployments {\\n    /**\\n     * Current chain does not have a TablelandTables deployment.\\n     */\\n    error ChainNotSupported(uint256 chainid);\\n\\n    // TablelandTables address on Ethereum.\\n    address internal constant MAINNET =\\n        0x012969f7e3439a9B04025b5a049EB9BAD82A8C12;\\n    // TablelandTables address on Ethereum.\\n    address internal constant HOMESTEAD = MAINNET;\\n    // TablelandTables address on Optimism.\\n    address internal constant OPTIMISM =\\n        0xfad44BF5B843dE943a09D4f3E84949A11d3aa3e6;\\n    // TablelandTables address on Arbitrum One.\\n    address internal constant ARBITRUM =\\n        0x9aBd75E8640871A5a20d3B4eE6330a04c962aFfd;\\n    // TablelandTables address on Arbitrum Nova.\\n    address internal constant ARBITRUM_NOVA =\\n        0x1A22854c5b1642760a827f20137a67930AE108d2;\\n    // TablelandTables address on Polygon.\\n    address internal constant MATIC =\\n        0x5c4e6A9e5C1e1BF445A062006faF19EA6c49aFeA;\\n    // TablelandTables address on Filecoin.\\n    address internal constant FILECOIN =\\n        0x59EF8Bf2d6c102B4c42AEf9189e1a9F0ABfD652d;\\n\\n    // TablelandTables address on Ethereum Sepolia.\\n    address internal constant SEPOLIA =\\n        0xc50C62498448ACc8dBdE43DA77f8D5D2E2c7597D;\\n    // TablelandTables address on Optimism Goerli.\\n    address internal constant OPTIMISM_GOERLI =\\n        0xC72E8a7Be04f2469f8C2dB3F1BdF69A7D516aBbA;\\n    // TablelandTables address on Arbitrum Goerli.\\n    address internal constant ARBITRUM_GOERLI =\\n        0x033f69e8d119205089Ab15D340F5b797732f646b;\\n    // TablelandTables address on Polygon Mumbai.\\n    address internal constant MATICMUM =\\n        0x4b48841d4b32C4650E4ABc117A03FE8B51f38F68;\\n    // TablelandTables address on Filecoin Calibration.\\n    address internal constant FILECOIN_CALIBRATION =\\n        0x030BCf3D50cad04c2e57391B12740982A9308621;\\n\\n    // TablelandTables address on for use with https://github.com/tablelandnetwork/local-tableland.\\n    address internal constant LOCAL_TABLELAND =\\n        0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512;\\n\\n    /**\\n     * @dev Returns an interface to Tableland for the currently executing EVM chain.\\n     *\\n     * The selection order is meant to reduce gas on more expensive chains.\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function get() internal view returns (ITablelandTables) {\\n        if (block.chainid == 1) {\\n            return ITablelandTables(MAINNET);\\n        } else if (block.chainid == 10) {\\n            return ITablelandTables(OPTIMISM);\\n        } else if (block.chainid == 42161) {\\n            return ITablelandTables(ARBITRUM);\\n        } else if (block.chainid == 42170) {\\n            return ITablelandTables(ARBITRUM_NOVA);\\n        } else if (block.chainid == 137) {\\n            return ITablelandTables(MATIC);\\n        } else if (block.chainid == 314) {\\n            return ITablelandTables(FILECOIN);\\n        } else if (block.chainid == 11155111) {\\n            return ITablelandTables(SEPOLIA);\\n        } else if (block.chainid == 420) {\\n            return ITablelandTables(OPTIMISM_GOERLI);\\n        } else if (block.chainid == 421613) {\\n            return ITablelandTables(ARBITRUM_GOERLI);\\n        } else if (block.chainid == 80001) {\\n            return ITablelandTables(MATICMUM);\\n        } else if (block.chainid == 314159) {\\n            return ITablelandTables(FILECOIN_CALIBRATION);\\n        } else if (block.chainid == 31337) {\\n            return ITablelandTables(LOCAL_TABLELAND);\\n        } else {\\n            revert ChainNotSupported(block.chainid);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x29920684b8971cd38b81626677de7be59039437c81f48a9d633bbee028dbc1d4\",\"license\":\"MIT\"},\"contracts/userProfile.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@tableland/evm/contracts/utils/TablelandDeployments.sol\\\";\\nimport \\\"@tableland/evm/contracts/utils/SQLHelpers.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\n\\ncontract userProfile {\\n    using Counters for Counters.Counter;\\n\\n    Counters.Counter private _studentID;\\n    Counters.Counter private _mentorID;\\n\\n    mapping (address => bool) isStudent;\\n    mapping (address => bool) isMentor;\\n\\n    uint256 public _studentTableId;\\n    string private constant _STUDENT_TABLE_PREFIX = \\\"studentTable\\\";\\n    uint256 public _mentorTableId;\\n    string private constant _MENTOR_TABLE_PREFIX = \\\"mentorTable\\\";\\n    address public owner;\\n\\n    constructor() {\\n        owner = msg.sender;\\n        createMentorTable();\\n        createStudentTable();\\n    }\\n\\n    // function to create student\\n    function createStudentTable() public {\\n        _studentTableId = TablelandDeployments.get().create( // creating a table ID\\n            address(this), // setting it's owner to the address for easy write access\\n            SQLHelpers.toCreateFromSchema(\\n                \\\"studentId integer primary key,\\\" // the primary key of the table\\n                \\\"name text,\\\"\\n                \\\"nickname text,\\\"\\n                \\\"additionalInfo text,\\\"\\n                \\\"profileImage text,\\\"\\n                \\\"coverImage text\\\",\\n                _STUDENT_TABLE_PREFIX // the needed prefix for table\\n            )\\n        );\\n    }\\n\\n    // function to create mentor function\\n    function createMentorTable() public {\\n        _mentorTableId = TablelandDeployments.get().create( // creating a table ID\\n            address(this), // setting it's owner to the address for easy write access\\n            SQLHelpers.toCreateFromSchema(\\n                \\\"mentorId integer primary key,\\\" // the primary key of the table\\n                \\\"name text,\\\"\\n                \\\"nickname text,\\\"\\n                \\\"experience text,\\\"\\n                \\\"languages text[],\\\"\\n                \\\"availability text[],\\\"\\n                \\\"additionalInfo text,\\\"\\n                \\\"profileImage text,\\\"\\n                \\\"coverImage text\\\",\\n                _MENTOR_TABLE_PREFIX // the needed prefix for table\\n            )\\n        );\\n    }\\n\\n    // function to add student\\n    function addStudent(string memory name, string memory nickname, string memory additionalInfo, string memory profileImage, string memory coverImage) public {\\n        require(isStudent[msg.sender] != true, \\\"You are already a student\\\");\\n\\n        TablelandDeployments.get().mutate(\\n        address(this),\\n        _studentTableId,\\n        SQLHelpers.toInsert(\\n        _STUDENT_TABLE_PREFIX,\\n        _studentTableId,\\n        \\\"studentId,name,nickname,additionalInfo,profileImage,coverImage\\\",\\n        string.concat(\\n            Strings.toString(_studentID.current()),\\n            \\\",\\\",\\n            SQLHelpers.quote(name),\\n            \\\",\\\",\\n            SQLHelpers.quote(nickname),\\n            \\\",\\\",              \\n            SQLHelpers.quote(additionalInfo),\\n            \\\",\\\",\\n            SQLHelpers.quote(profileImage),\\n            \\\",\\\",\\n            SQLHelpers.quote(coverImage)\\n        )\\n        )\\n    );\\n\\n    isStudent[msg.sender] = true;\\n    _studentID.increment();\\n    }\\n\\n    // function to add student\\n    function addMentor(string[] memory details, string[] memory languages, string[] memory availability) public {\\n        require(isMentor[msg.sender] != true, \\\"You are already a Mentor\\\");\\n        string memory createString = concatWriteQuery(_mentorID.current(), details, languages, availability);\\n        \\n        TablelandDeployments.get().mutate(\\n        address(this),\\n        _mentorTableId,\\n        SQLHelpers.toInsert(\\n        _MENTOR_TABLE_PREFIX,\\n        _mentorTableId,\\n        \\\"mentorId,name,nickname,experience,languages,availability,additionalInfo,profileImage,coverImage\\\",\\n        createString\\n        )\\n    );\\n\\n    isMentor[msg.sender] = true;\\n    _mentorID.increment();\\n    }\\n\\n    function concatArray(string[] memory items) public pure returns (string memory) {\\n        string memory queryString;\\n        for (uint i = 0; i < items.length; i++) {\\n            if (i == 0) {\\n            queryString = string.concat(\\n                \\\"{\\\", items[i], \\\",\\\"\\n            );\\n            } else if(i == (items.length - 1)) {\\n            queryString = string.concat(\\n                queryString,\\n                items[i], \\\"}\\\"\\n            );\\n            }\\n            else {\\n            queryString = string.concat(\\n                queryString,\\n                items[i], \\\",\\\"\\n            );\\n            }\\n        }\\n        return queryString;\\n    }\\n\\n    function concatWriteQuery(uint256 id, string[] memory details, string[] memory languages, string[] memory availability) public pure returns(string memory queryString) {\\n        require(details.length > 5, \\\"array too short\\\");\\n        string memory languageString = concatArray(languages);\\n        string memory availabilityString = concatArray(availability);\\n\\n        for (uint i = 0; i < details.length; i++) {\\n            if (i == 0) {\\n            queryString = string.concat(\\n                Strings.toString(id),\\n                \\\",\\\",\\n                SQLHelpers.quote(details[0])\\n            );\\n            } else if(i == 2) {\\n            queryString = string.concat(\\n                queryString,\\n                SQLHelpers.quote(details[i]),\\n                SQLHelpers.quote(languageString),\\n                \\\",\\\",\\n                SQLHelpers.quote(availabilityString),\\n                \\\",\\\"\\n            );\\n            } else if(i == (details.length - 1)) {\\n            queryString = string.concat(\\n                queryString,\\n                SQLHelpers.quote(details[i])\\n            );\\n            }\\n            else {\\n            queryString = string.concat(\\n                queryString,\\n                SQLHelpers.quote(details[i]), \\\",\\\"\\n            );\\n            }\\n        }\\n    }\\n}\",\"keccak256\":\"0xc799d2cc1187e56aa78c2543bc22cacc0eca3a81d0c41ef61e376a399d60780a\",\"license\":\"SEE LICENSE IN LICENSE\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50600680546001600160a01b031916331790556200002e6200003e565b620000386200011f565b62000769565b620000536200020160201b620007f51760201c565b6001600160a01b031663a15ab08d30620000b56040518060c00160405280609f815260200162001fcc609f91396040518060400160405280600b81526020016a6d656e746f725461626c6560a81b815250620003ce60201b620009c41760201c565b6040518363ffffffff1660e01b8152600401620000d49291906200061f565b6020604051808303816000875af1158015620000f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200011a919062000653565b600555565b620001346200020160201b620007f51760201c565b6001600160a01b031663a15ab08d30620001976040518060a00160405280606b81526020016200206b606b91396040518060400160405280600c81526020016b73747564656e745461626c6560a01b815250620003ce60201b620009c41760201c565b6040518363ffffffff1660e01b8152600401620001b69291906200061f565b6020604051808303816000875af1158015620001d6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001fc919062000653565b600455565b60004660010362000225575073012969f7e3439a9b04025b5a049eb9bad82a8c1290565b46600a0362000247575073fad44bf5b843de943a09d4f3e84949a11d3aa3e690565b4661a4b1036200026a5750739abd75e8640871a5a20d3b4ee6330a04c962affd90565b4661a4ba036200028d5750731a22854c5b1642760a827f20137a67930ae108d290565b46608903620002af5750735c4e6a9e5c1e1bf445a062006faf19ea6c49afea90565b4661013a03620002d257507359ef8bf2d6c102b4c42aef9189e1a9f0abfd652d90565b4662aa36a703620002f6575073c50c62498448acc8dbde43da77f8d5d2e2c7597d90565b466101a40362000319575073c72e8a7be04f2469f8c2db3f1bdf69a7d516abba90565b4662066eed036200033d575073033f69e8d119205089ab15d340f5b797732f646b90565b466201388103620003615750734b48841d4b32c4650e4abc117a03fe8b51f38f6890565b466204cb2f0362000385575073030bcf3d50cad04c2e57391b12740982a930862190565b46617a6903620003a8575073e7f1725e7734ce288f8367e1bb143e90bb3f051290565b4660405163264e42cf60e01b8152600401620003c591906200067f565b60405180910390fd5b606081620003e7466200041460201b620009fb1760201c565b84604051602001620003fc93929190620006e3565b60405160208183030381529060405290505b92915050565b606060006200042e83620004b860201b62000a9c1760201c565b60010190506000816001600160401b0381111562000450576200045062000753565b6040519080825280601f01601f1916602001820160405280156200047b576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846200048557509392505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000831062000502577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef810000000083106200052f576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106200054e57662386f26fc10000830492506010015b6305f5e100831062000567576305f5e100830492506008015b61271083106200057c57612710830492506004015b606483106200058f576064830492506002015b600a83106200040e5760010192915050565b60006001600160a01b0382166200040e565b620005be81620005a1565b82525050565b60005b83811015620005e1578181015183820152602001620005c7565b50506000910152565b6000620005f5825190565b8084526020840193506200060e818560208601620005c4565b601f01601f19169290920192915050565b604081016200062f8285620005b3565b8181036020830152620006438184620005ea565b949350505050565b80516200040e565b6000602082840312156200066a576200066a600080fd5b60006200064384846200064b565b80620005be565b602081016200040e828462000678565b60006200069a825190565b620006aa818560208601620005c4565b9290920192915050565b605f60f81b815260005b5060010190565b600560fb1b81526000620006be565b602960f81b81526000620006be565b6c021a922a0aa22902a20a126229609d1b8152600d0160006200070782866200068f565b91506200071482620006b4565b91506200072282856200068f565b91506200072f82620006c5565b91506200073d82846200068f565b91506200074a82620006d4565b95945050505050565b634e487b7160e01b600052604160045260246000fd5b61185380620007796000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c80639d35e6c211610076578063b16d39781161005b578063b16d397814610138578063bbb6a8bc14610140578063d276d2281461014857600080fd5b80639d35e6c21461011c578063a16e29971461012f57600080fd5b806328cd7eb1146100a85780638226806a146100bd57806387290015146100dc5780638da5cb5b146100fc575b600080fd5b6100bb6100b6366004610dc8565b61015b565b005b6100c660045481565b6040516100d39190610e70565b60405180910390f35b6100ef6100ea366004610e85565b610294565b6040516100d39190610f90565b60065461010f906001600160a01b031681565b6040516100d39190610fc2565b6100bb61012a366004610fd0565b61040c565b6100c660055481565b6100bb610584565b6100bb610646565b6100ef6101563660046110ce565b610707565b3360009081526003602052604090205460ff1615156001036101985760405162461bcd60e51b815260040161018f90611140565b60405180910390fd5b60006101ae6101a660015490565b858585610294565b90506101b86107f5565b6001600160a01b031663377af0da306005546102136040518060400160405280600b81526020016a6d656e746f725461626c6560a81b8152506005546040518060800160405280605f8152602001611677605f913988610b7e565b6040518463ffffffff1660e01b815260040161023193929190611150565b600060405180830381600087803b15801561024b57600080fd5b505af115801561025f573d6000803e3d6000fd5b5050336000908152600360205260409020805460ff1916600190811790915561028e9250905080546001019055565b50505050565b606060058451116102b75760405162461bcd60e51b815260040161018f906111ba565b60006102c284610707565b905060006102cf84610707565b905060005b86518110156104015780600003610338576102ee886109fb565b61031188600081518110610304576103046111ca565b6020026020010151610bbd565b604051602001610322929190611202565b60405160208183030381529060405293506103ef565b8060020361037b5783610356888381518110610304576103046111ca565b61035f85610bbd565b61036885610bbd565b6040516020016103229493929190611224565b600187516103899190611288565b81036103b657836103a5888381518110610304576103046111ca565b60405160200161032292919061129b565b836103cc888381518110610304576103046111ca565b6040516020016103dd9291906112b3565b60405160208183030381529060405293505b806103f9816112df565b9150506102d4565b505050949350505050565b3360009081526002602052604090205460ff1615156001036104405760405162461bcd60e51b815260040161018f9061132d565b6104486107f5565b6001600160a01b031663377af0da306004546105056040518060400160405280600c81526020016b73747564656e745461626c6560a01b8152506004546040518060600160405280603e81526020016117e0603e91396104af6104aa60005490565b6109fb565b6104b88e610bbd565b6104c18e610bbd565b6104ca8e610bbd565b6104d38e610bbd565b6104dc8e610bbd565b6040516020016104f19695949392919061133d565b604051602081830303815290604052610b7e565b6040518463ffffffff1660e01b815260040161052393929190611150565b600060405180830381600087803b15801561053d57600080fd5b505af1158015610551573d6000803e3d6000fd5b5050336000908152600260205260408120805460ff1916600117905561057d9250905080546001019055565b5050505050565b61058c6107f5565b6001600160a01b031663a15ab08d306105e16040518060a00160405280606b8152602001611775606b91396040518060400160405280600c81526020016b73747564656e745461626c6560a01b8152506109c4565b6040518363ffffffff1660e01b81526004016105fe9291906113c3565b6020604051808303816000875af115801561061d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064191906113ea565b600455565b61064e6107f5565b6001600160a01b031663a15ab08d306106a26040518060c00160405280609f81526020016116d6609f91396040518060400160405280600b81526020016a6d656e746f725461626c6560a81b8152506109c4565b6040518363ffffffff1660e01b81526004016106bf9291906113c3565b6020604051808303816000875af11580156106de573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070291906113ea565b600555565b60608060005b83518110156107ee578060000361075e57838181518110610730576107306111ca565b6020026020010151604051602001610748919061140b565b60405160208183030381529060405291506107dc565b6001845161076c9190611288565b810361079e5781848281518110610785576107856111ca565b602002602001015160405160200161074892919061144e565b818482815181106107b1576107b16111ca565b60200260200101516040516020016107ca9291906112b3565b60405160208183030381529060405291505b806107e6816112df565b91505061070d565b5092915050565b600046600103610818575073012969f7e3439a9b04025b5a049eb9bad82a8c1290565b46600a03610839575073fad44bf5b843de943a09d4f3e84949a11d3aa3e690565b4661a4b10361085b5750739abd75e8640871a5a20d3b4ee6330a04c962affd90565b4661a4ba0361087d5750731a22854c5b1642760a827f20137a67930ae108d290565b4660890361089e5750735c4e6a9e5c1e1bf445a062006faf19ea6c49afea90565b4661013a036108c057507359ef8bf2d6c102b4c42aef9189e1a9f0abfd652d90565b4662aa36a7036108e3575073c50c62498448acc8dbde43da77f8d5d2e2c7597d90565b466101a403610905575073c72e8a7be04f2469f8c2db3f1bdf69a7d516abba90565b4662066eed03610928575073033f69e8d119205089ab15d340f5b797732f646b90565b46620138810361094b5750734b48841d4b32c4650e4abc117a03fe8b51f38f6890565b466204cb2f0361096e575073030bcf3d50cad04c2e57391b12740982a930862190565b46617a6903610990575073e7f1725e7734ce288f8367e1bb143e90bb3f051290565b466040517f264e42cf00000000000000000000000000000000000000000000000000000000815260040161018f9190610e70565b6060816109d0466109fb565b846040516020016109e39392919061150e565b60405160208183030381529060405290505b92915050565b60606000610a0883610a9c565b600101905060008167ffffffffffffffff811115610a2857610a28610c0d565b6040519080825280601f01601f191660200182016040528015610a52576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8504945084610a5c575b509392505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310610ae5577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310610b11576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310610b2f57662386f26fc10000830492506010015b6305f5e1008310610b47576305f5e100830492506008015b6127108310610b5b57612710830492506004015b60648310610b6d576064830492506002015b600a83106109f55760010192915050565b60606000610b8c8686610be6565b9050808484604051602001610ba393929190611579565b604051602081830303815290604052915050949350505050565b606081604051602001610bd0919061161a565b6040516020818303038152906040529050919050565b606082610bf2466109fb565b610bfb846109fb565b6040516020016109e39392919061163c565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715610c4957610c49610c0d565b6040525050565b6000610c5b60405190565b9050610c678282610c23565b919050565b600067ffffffffffffffff821115610c8657610c86610c0d565b5060209081020190565b600067ffffffffffffffff821115610caa57610caa610c0d565b601f19601f83011660200192915050565b82818337506000910152565b6000610cda610cd584610c90565b610c50565b905082815260208101848484011115610cf557610cf5600080fd5b610a94848285610cbb565b600082601f830112610d1457610d14600080fd5b8135610d24848260208601610cc7565b949350505050565b6000610d3a610cd584610c6c565b83815290506020808201908402830185811115610d5957610d59600080fd5b835b81811015610d9a57803567ffffffffffffffff811115610d7d57610d7d600080fd5b808601610d8a8982610d00565b8552505060209283019201610d5b565b5050509392505050565b600082601f830112610db857610db8600080fd5b8135610d24848260208601610d2c565b600080600060608486031215610de057610de0600080fd5b833567ffffffffffffffff811115610dfa57610dfa600080fd5b610e0686828701610da4565b935050602084013567ffffffffffffffff811115610e2657610e26600080fd5b610e3286828701610da4565b925050604084013567ffffffffffffffff811115610e5257610e52600080fd5b610e5e86828701610da4565b9150509250925092565b805b82525050565b602081016109f58284610e68565b80356109f5565b60008060008060808587031215610e9e57610e9e600080fd5b6000610eaa8787610e7e565b945050602085013567ffffffffffffffff811115610eca57610eca600080fd5b610ed687828801610da4565b935050604085013567ffffffffffffffff811115610ef657610ef6600080fd5b610f0287828801610da4565b925050606085013567ffffffffffffffff811115610f2257610f22600080fd5b610f2e87828801610da4565b91505092959194509250565b60005b83811015610f55578181015183820152602001610f3d565b50506000910152565b6000610f68825190565b808452602084019350610f7f818560208601610f3a565b601f01601f19169290920192915050565b60208082528101610fa18184610f5e565b9392505050565b60006001600160a01b0382166109f5565b610e6a81610fa8565b602081016109f58284610fb9565b600080600080600060a08688031215610feb57610feb600080fd5b853567ffffffffffffffff81111561100557611005600080fd5b61101188828901610d00565b955050602086013567ffffffffffffffff81111561103157611031600080fd5b61103d88828901610d00565b945050604086013567ffffffffffffffff81111561105d5761105d600080fd5b61106988828901610d00565b935050606086013567ffffffffffffffff81111561108957611089600080fd5b61109588828901610d00565b925050608086013567ffffffffffffffff8111156110b5576110b5600080fd5b6110c188828901610d00565b9150509295509295909350565b6000602082840312156110e3576110e3600080fd5b813567ffffffffffffffff8111156110fd576110fd600080fd5b610d2484828501610da4565b601881526000602082017f596f752061726520616c72656164792061204d656e746f720000000000000000815291505b5060200190565b602080825281016109f581611109565b6060810161115e8286610fb9565b61116b6020830185610e68565b818103604083015261117d8184610f5e565b95945050505050565b600f81526000602082017f617272617920746f6f2073686f7274000000000000000000000000000000000081529150611139565b602080825281016109f581611186565b634e487b7160e01b600052603260045260246000fd5b60006111ea825190565b6111f8818560208601610f3a565b9290920192915050565b600061120e82856111e0565b600b60fa1b81526001019150610d2482846111e0565b600061123082876111e0565b915061123c82866111e0565b915061124882856111e0565b600b60fa1b8152600101915061125e82846111e0565b600b60fa1b81526001019695505050505050565b634e487b7160e01b600052601160045260246000fd5b818103818111156109f5576109f5611272565b60006112a782856111e0565b9150610d2482846111e0565b60006112bf82856111e0565b91506112cb82846111e0565b600b60fa1b815291505b5060010192915050565b600060001982036112f2576112f2611272565b5060010190565b601981526000602082017f596f752061726520616c726561647920612073747564656e740000000000000081529150611139565b602080825281016109f5816112f9565b600061134982896111e0565b600b60fa1b8152600101915061135f82886111e0565b600b60fa1b8152600101915061137582876111e0565b600b60fa1b8152600101915061138b82866111e0565b600b60fa1b815260010191506113a182856111e0565b600b60fa1b815260010191506113b782846111e0565b98975050505050505050565b604081016113d18285610fb9565b8181036020830152610d248184610f5e565b80516109f5565b6000602082840312156113ff576113ff600080fd5b6000610d2484846113e3565b7f7b000000000000000000000000000000000000000000000000000000000000008152600101600061143d82846111e0565b600b60fa1b81526001019392505050565b600061145a82856111e0565b915061146682846111e0565b7f7d00000000000000000000000000000000000000000000000000000000000000815291506112d5565b7f5f00000000000000000000000000000000000000000000000000000000000000815260006112f2565b7f2800000000000000000000000000000000000000000000000000000000000000815260006112f2565b7f2900000000000000000000000000000000000000000000000000000000000000815260006112f2565b7f435245415445205441424c4520000000000000000000000000000000000000008152600d01600061154082866111e0565b915061154b82611490565b915061155782856111e0565b9150611562826114ba565b915061156e82846111e0565b915061117d826114e4565b7f494e5345525420494e544f2000000000000000000000000000000000000000008152600c0160006115ab82866111e0565b91506115b6826114ba565b91506115c282856111e0565b7f2956414c554553280000000000000000000000000000000000000000000000008152915060088201611562565b7f2700000000000000000000000000000000000000000000000000000000000000815260006112f2565b6000611625826115f0565b915061163182846111e0565b9150610fa1826115f0565b600061164882866111e0565b915061165382611490565b915061165f82856111e0565b915061166a82611490565b915061117d82846111e056fe6d656e746f7249642c6e616d652c6e69636b6e616d652c657870657269656e63652c6c616e6775616765732c617661696c6162696c6974792c6164646974696f6e616c496e666f2c70726f66696c65496d6167652c636f766572496d6167656d656e746f72496420696e7465676572207072696d617279206b65792c6e616d6520746578742c6e69636b6e616d6520746578742c657870657269656e636520746578742c6c616e67756167657320746578745b5d2c617661696c6162696c69747920746578745b5d2c6164646974696f6e616c496e666f20746578742c70726f66696c65496d61676520746578742c636f766572496d616765207465787473747564656e74496420696e7465676572207072696d617279206b65792c6e616d6520746578742c6e69636b6e616d6520746578742c6164646974696f6e616c496e666f20746578742c70726f66696c65496d61676520746578742c636f766572496d616765207465787473747564656e7449642c6e616d652c6e69636b6e616d652c6164646974696f6e616c496e666f2c70726f66696c65496d6167652c636f766572496d616765a26469706673582212207f0abeaf878bfec241cb73ad263c9a6affc08cb4c1b75d6f327368faa4aef6c264736f6c634300081100336d656e746f72496420696e7465676572207072696d617279206b65792c6e616d6520746578742c6e69636b6e616d6520746578742c657870657269656e636520746578742c6c616e67756167657320746578745b5d2c617661696c6162696c69747920746578745b5d2c6164646974696f6e616c496e666f20746578742c70726f66696c65496d61676520746578742c636f766572496d616765207465787473747564656e74496420696e7465676572207072696d617279206b65792c6e616d6520746578742c6e69636b6e616d6520746578742c6164646974696f6e616c496e666f20746578742c70726f66696c65496d61676520746578742c636f766572496d6167652074657874",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a35760003560e01c80639d35e6c211610076578063b16d39781161005b578063b16d397814610138578063bbb6a8bc14610140578063d276d2281461014857600080fd5b80639d35e6c21461011c578063a16e29971461012f57600080fd5b806328cd7eb1146100a85780638226806a146100bd57806387290015146100dc5780638da5cb5b146100fc575b600080fd5b6100bb6100b6366004610dc8565b61015b565b005b6100c660045481565b6040516100d39190610e70565b60405180910390f35b6100ef6100ea366004610e85565b610294565b6040516100d39190610f90565b60065461010f906001600160a01b031681565b6040516100d39190610fc2565b6100bb61012a366004610fd0565b61040c565b6100c660055481565b6100bb610584565b6100bb610646565b6100ef6101563660046110ce565b610707565b3360009081526003602052604090205460ff1615156001036101985760405162461bcd60e51b815260040161018f90611140565b60405180910390fd5b60006101ae6101a660015490565b858585610294565b90506101b86107f5565b6001600160a01b031663377af0da306005546102136040518060400160405280600b81526020016a6d656e746f725461626c6560a81b8152506005546040518060800160405280605f8152602001611677605f913988610b7e565b6040518463ffffffff1660e01b815260040161023193929190611150565b600060405180830381600087803b15801561024b57600080fd5b505af115801561025f573d6000803e3d6000fd5b5050336000908152600360205260409020805460ff1916600190811790915561028e9250905080546001019055565b50505050565b606060058451116102b75760405162461bcd60e51b815260040161018f906111ba565b60006102c284610707565b905060006102cf84610707565b905060005b86518110156104015780600003610338576102ee886109fb565b61031188600081518110610304576103046111ca565b6020026020010151610bbd565b604051602001610322929190611202565b60405160208183030381529060405293506103ef565b8060020361037b5783610356888381518110610304576103046111ca565b61035f85610bbd565b61036885610bbd565b6040516020016103229493929190611224565b600187516103899190611288565b81036103b657836103a5888381518110610304576103046111ca565b60405160200161032292919061129b565b836103cc888381518110610304576103046111ca565b6040516020016103dd9291906112b3565b60405160208183030381529060405293505b806103f9816112df565b9150506102d4565b505050949350505050565b3360009081526002602052604090205460ff1615156001036104405760405162461bcd60e51b815260040161018f9061132d565b6104486107f5565b6001600160a01b031663377af0da306004546105056040518060400160405280600c81526020016b73747564656e745461626c6560a01b8152506004546040518060600160405280603e81526020016117e0603e91396104af6104aa60005490565b6109fb565b6104b88e610bbd565b6104c18e610bbd565b6104ca8e610bbd565b6104d38e610bbd565b6104dc8e610bbd565b6040516020016104f19695949392919061133d565b604051602081830303815290604052610b7e565b6040518463ffffffff1660e01b815260040161052393929190611150565b600060405180830381600087803b15801561053d57600080fd5b505af1158015610551573d6000803e3d6000fd5b5050336000908152600260205260408120805460ff1916600117905561057d9250905080546001019055565b5050505050565b61058c6107f5565b6001600160a01b031663a15ab08d306105e16040518060a00160405280606b8152602001611775606b91396040518060400160405280600c81526020016b73747564656e745461626c6560a01b8152506109c4565b6040518363ffffffff1660e01b81526004016105fe9291906113c3565b6020604051808303816000875af115801561061d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064191906113ea565b600455565b61064e6107f5565b6001600160a01b031663a15ab08d306106a26040518060c00160405280609f81526020016116d6609f91396040518060400160405280600b81526020016a6d656e746f725461626c6560a81b8152506109c4565b6040518363ffffffff1660e01b81526004016106bf9291906113c3565b6020604051808303816000875af11580156106de573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070291906113ea565b600555565b60608060005b83518110156107ee578060000361075e57838181518110610730576107306111ca565b6020026020010151604051602001610748919061140b565b60405160208183030381529060405291506107dc565b6001845161076c9190611288565b810361079e5781848281518110610785576107856111ca565b602002602001015160405160200161074892919061144e565b818482815181106107b1576107b16111ca565b60200260200101516040516020016107ca9291906112b3565b60405160208183030381529060405291505b806107e6816112df565b91505061070d565b5092915050565b600046600103610818575073012969f7e3439a9b04025b5a049eb9bad82a8c1290565b46600a03610839575073fad44bf5b843de943a09d4f3e84949a11d3aa3e690565b4661a4b10361085b5750739abd75e8640871a5a20d3b4ee6330a04c962affd90565b4661a4ba0361087d5750731a22854c5b1642760a827f20137a67930ae108d290565b4660890361089e5750735c4e6a9e5c1e1bf445a062006faf19ea6c49afea90565b4661013a036108c057507359ef8bf2d6c102b4c42aef9189e1a9f0abfd652d90565b4662aa36a7036108e3575073c50c62498448acc8dbde43da77f8d5d2e2c7597d90565b466101a403610905575073c72e8a7be04f2469f8c2db3f1bdf69a7d516abba90565b4662066eed03610928575073033f69e8d119205089ab15d340f5b797732f646b90565b46620138810361094b5750734b48841d4b32c4650e4abc117a03fe8b51f38f6890565b466204cb2f0361096e575073030bcf3d50cad04c2e57391b12740982a930862190565b46617a6903610990575073e7f1725e7734ce288f8367e1bb143e90bb3f051290565b466040517f264e42cf00000000000000000000000000000000000000000000000000000000815260040161018f9190610e70565b6060816109d0466109fb565b846040516020016109e39392919061150e565b60405160208183030381529060405290505b92915050565b60606000610a0883610a9c565b600101905060008167ffffffffffffffff811115610a2857610a28610c0d565b6040519080825280601f01601f191660200182016040528015610a52576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8504945084610a5c575b509392505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310610ae5577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310610b11576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310610b2f57662386f26fc10000830492506010015b6305f5e1008310610b47576305f5e100830492506008015b6127108310610b5b57612710830492506004015b60648310610b6d576064830492506002015b600a83106109f55760010192915050565b60606000610b8c8686610be6565b9050808484604051602001610ba393929190611579565b604051602081830303815290604052915050949350505050565b606081604051602001610bd0919061161a565b6040516020818303038152906040529050919050565b606082610bf2466109fb565b610bfb846109fb565b6040516020016109e39392919061163c565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715610c4957610c49610c0d565b6040525050565b6000610c5b60405190565b9050610c678282610c23565b919050565b600067ffffffffffffffff821115610c8657610c86610c0d565b5060209081020190565b600067ffffffffffffffff821115610caa57610caa610c0d565b601f19601f83011660200192915050565b82818337506000910152565b6000610cda610cd584610c90565b610c50565b905082815260208101848484011115610cf557610cf5600080fd5b610a94848285610cbb565b600082601f830112610d1457610d14600080fd5b8135610d24848260208601610cc7565b949350505050565b6000610d3a610cd584610c6c565b83815290506020808201908402830185811115610d5957610d59600080fd5b835b81811015610d9a57803567ffffffffffffffff811115610d7d57610d7d600080fd5b808601610d8a8982610d00565b8552505060209283019201610d5b565b5050509392505050565b600082601f830112610db857610db8600080fd5b8135610d24848260208601610d2c565b600080600060608486031215610de057610de0600080fd5b833567ffffffffffffffff811115610dfa57610dfa600080fd5b610e0686828701610da4565b935050602084013567ffffffffffffffff811115610e2657610e26600080fd5b610e3286828701610da4565b925050604084013567ffffffffffffffff811115610e5257610e52600080fd5b610e5e86828701610da4565b9150509250925092565b805b82525050565b602081016109f58284610e68565b80356109f5565b60008060008060808587031215610e9e57610e9e600080fd5b6000610eaa8787610e7e565b945050602085013567ffffffffffffffff811115610eca57610eca600080fd5b610ed687828801610da4565b935050604085013567ffffffffffffffff811115610ef657610ef6600080fd5b610f0287828801610da4565b925050606085013567ffffffffffffffff811115610f2257610f22600080fd5b610f2e87828801610da4565b91505092959194509250565b60005b83811015610f55578181015183820152602001610f3d565b50506000910152565b6000610f68825190565b808452602084019350610f7f818560208601610f3a565b601f01601f19169290920192915050565b60208082528101610fa18184610f5e565b9392505050565b60006001600160a01b0382166109f5565b610e6a81610fa8565b602081016109f58284610fb9565b600080600080600060a08688031215610feb57610feb600080fd5b853567ffffffffffffffff81111561100557611005600080fd5b61101188828901610d00565b955050602086013567ffffffffffffffff81111561103157611031600080fd5b61103d88828901610d00565b945050604086013567ffffffffffffffff81111561105d5761105d600080fd5b61106988828901610d00565b935050606086013567ffffffffffffffff81111561108957611089600080fd5b61109588828901610d00565b925050608086013567ffffffffffffffff8111156110b5576110b5600080fd5b6110c188828901610d00565b9150509295509295909350565b6000602082840312156110e3576110e3600080fd5b813567ffffffffffffffff8111156110fd576110fd600080fd5b610d2484828501610da4565b601881526000602082017f596f752061726520616c72656164792061204d656e746f720000000000000000815291505b5060200190565b602080825281016109f581611109565b6060810161115e8286610fb9565b61116b6020830185610e68565b818103604083015261117d8184610f5e565b95945050505050565b600f81526000602082017f617272617920746f6f2073686f7274000000000000000000000000000000000081529150611139565b602080825281016109f581611186565b634e487b7160e01b600052603260045260246000fd5b60006111ea825190565b6111f8818560208601610f3a565b9290920192915050565b600061120e82856111e0565b600b60fa1b81526001019150610d2482846111e0565b600061123082876111e0565b915061123c82866111e0565b915061124882856111e0565b600b60fa1b8152600101915061125e82846111e0565b600b60fa1b81526001019695505050505050565b634e487b7160e01b600052601160045260246000fd5b818103818111156109f5576109f5611272565b60006112a782856111e0565b9150610d2482846111e0565b60006112bf82856111e0565b91506112cb82846111e0565b600b60fa1b815291505b5060010192915050565b600060001982036112f2576112f2611272565b5060010190565b601981526000602082017f596f752061726520616c726561647920612073747564656e740000000000000081529150611139565b602080825281016109f5816112f9565b600061134982896111e0565b600b60fa1b8152600101915061135f82886111e0565b600b60fa1b8152600101915061137582876111e0565b600b60fa1b8152600101915061138b82866111e0565b600b60fa1b815260010191506113a182856111e0565b600b60fa1b815260010191506113b782846111e0565b98975050505050505050565b604081016113d18285610fb9565b8181036020830152610d248184610f5e565b80516109f5565b6000602082840312156113ff576113ff600080fd5b6000610d2484846113e3565b7f7b000000000000000000000000000000000000000000000000000000000000008152600101600061143d82846111e0565b600b60fa1b81526001019392505050565b600061145a82856111e0565b915061146682846111e0565b7f7d00000000000000000000000000000000000000000000000000000000000000815291506112d5565b7f5f00000000000000000000000000000000000000000000000000000000000000815260006112f2565b7f2800000000000000000000000000000000000000000000000000000000000000815260006112f2565b7f2900000000000000000000000000000000000000000000000000000000000000815260006112f2565b7f435245415445205441424c4520000000000000000000000000000000000000008152600d01600061154082866111e0565b915061154b82611490565b915061155782856111e0565b9150611562826114ba565b915061156e82846111e0565b915061117d826114e4565b7f494e5345525420494e544f2000000000000000000000000000000000000000008152600c0160006115ab82866111e0565b91506115b6826114ba565b91506115c282856111e0565b7f2956414c554553280000000000000000000000000000000000000000000000008152915060088201611562565b7f2700000000000000000000000000000000000000000000000000000000000000815260006112f2565b6000611625826115f0565b915061163182846111e0565b9150610fa1826115f0565b600061164882866111e0565b915061165382611490565b915061165f82856111e0565b915061166a82611490565b915061117d82846111e056fe6d656e746f7249642c6e616d652c6e69636b6e616d652c657870657269656e63652c6c616e6775616765732c617661696c6162696c6974792c6164646974696f6e616c496e666f2c70726f66696c65496d6167652c636f766572496d6167656d656e746f72496420696e7465676572207072696d617279206b65792c6e616d6520746578742c6e69636b6e616d6520746578742c657870657269656e636520746578742c6c616e67756167657320746578745b5d2c617661696c6162696c69747920746578745b5d2c6164646974696f6e616c496e666f20746578742c70726f66696c65496d61676520746578742c636f766572496d616765207465787473747564656e74496420696e7465676572207072696d617279206b65792c6e616d6520746578742c6e69636b6e616d6520746578742c6164646974696f6e616c496e666f20746578742c70726f66696c65496d61676520746578742c636f766572496d616765207465787473747564656e7449642c6e616d652c6e69636b6e616d652c6164646974696f6e616c496e666f2c70726f66696c65496d6167652c636f766572496d616765a26469706673582212207f0abeaf878bfec241cb73ad263c9a6affc08cb4c1b75d6f327368faa4aef6c264736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ChainNotSupported(uint256)": [
        {
          "notice": "Current chain does not have a TablelandTables deployment."
        }
      ]
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2945,
        "contract": "contracts/userProfile.sol:userProfile",
        "label": "_studentID",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(Counter)50_storage"
      },
      {
        "astId": 2948,
        "contract": "contracts/userProfile.sol:userProfile",
        "label": "_mentorID",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Counter)50_storage"
      },
      {
        "astId": 2952,
        "contract": "contracts/userProfile.sol:userProfile",
        "label": "isStudent",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2956,
        "contract": "contracts/userProfile.sol:userProfile",
        "label": "isMentor",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2958,
        "contract": "contracts/userProfile.sol:userProfile",
        "label": "_studentTableId",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2963,
        "contract": "contracts/userProfile.sol:userProfile",
        "label": "_mentorTableId",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2968,
        "contract": "contracts/userProfile.sol:userProfile",
        "label": "owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(Counter)50_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 49,
            "contract": "contracts/userProfile.sol:userProfile",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}