{
  "address": "0x4c2A6385d4B9Ef1DFa2a8ebe21aca770b8106672",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chainid",
          "type": "uint256"
        }
      ],
      "name": "ChainNotSupported",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "sessionId",
          "type": "uint256"
        }
      ],
      "name": "SessionAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "sessionId",
          "type": "uint256"
        }
      ],
      "name": "SessionCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "mentor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "student",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "meetingLink",
          "type": "string"
        }
      ],
      "name": "SessionScheduled",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_tableId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_sessionId",
          "type": "uint256"
        }
      ],
      "name": "acceptSession",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_sessionId",
          "type": "uint256"
        }
      ],
      "name": "cancelSession",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createSessionTable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "fetchMentorsPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "registerMentorPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mentor",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_meetingLink",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "scheduleSession",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "sessionsAttendedCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "sessionsMentoredCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tableName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd9b36dee97581adc3ce1c9fc8170541f0b4672e0d57ae0f38a0e47b61e97e027",
  "receipt": {
    "to": null,
    "from": "0xb84bc4615C26631dc13b319133E2d4bF6382Fd65",
    "contractAddress": "0x4c2A6385d4B9Ef1DFa2a8ebe21aca770b8106672",
    "transactionIndex": 0,
    "gasUsed": "123827511",
    "logsBloom": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
    "blockHash": "0x722fc8f728f7084188395b2b68aaf1d14030afbb71c4fe706df99f28f33855b2",
    "transactionHash": "0xd9b36dee97581adc3ce1c9fc8170541f0b4672e0d57ae0f38a0e47b61e97e027",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 941869,
        "transactionHash": "0xd9b36dee97581adc3ce1c9fc8170541f0b4672e0d57ae0f38a0e47b61e97e027",
        "address": "0x030BCf3D50cad04c2e57391B12740982A9308621",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004c2a6385d4b9ef1dfa2a8ebe21aca770b8106672",
          "0x0000000000000000000000000000000000000000000000000000000000000187"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x722fc8f728f7084188395b2b68aaf1d14030afbb71c4fe706df99f28f33855b2"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 941869,
        "transactionHash": "0xd9b36dee97581adc3ce1c9fc8170541f0b4672e0d57ae0f38a0e47b61e97e027",
        "address": "0x030BCf3D50cad04c2e57391B12740982A9308621",
        "topics": [
          "0xfe0c067afc4fe17adcf4cfa139aabad6dc30dd86dfe39fb2b858961637156cdd"
        ],
        "data": "0x0000000000000000000000004c2a6385d4b9ef1dfa2a8ebe21aca770b8106672000000000000000000000000000000000000000000000000000000000000018700000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000098435245415445205441424c452073657373696f6e5461626c655f3331343135392873657373696f6e496420696e7465676572207072696d617279206b65792c6d656e746f7220746578742c73747564656e7420746578742c69734163636570746564204e554d4245522831292c74696d6520746578742c6d656574696e674c696e6b20746578742c7061796d656e744665652074657874290000000000000000",
        "logIndex": 1,
        "blockHash": "0x722fc8f728f7084188395b2b68aaf1d14030afbb71c4fe706df99f28f33855b2"
      }
    ],
    "blockNumber": 941869,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a823d4490e2ddd1a1fe0e18f5ffba840",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainid\",\"type\":\"uint256\"}],\"name\":\"ChainNotSupported\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sessionId\",\"type\":\"uint256\"}],\"name\":\"SessionAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sessionId\",\"type\":\"uint256\"}],\"name\":\"SessionCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"mentor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"student\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"meetingLink\",\"type\":\"string\"}],\"name\":\"SessionScheduled\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_tableId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sessionId\",\"type\":\"uint256\"}],\"name\":\"acceptSession\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sessionId\",\"type\":\"uint256\"}],\"name\":\"cancelSession\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createSessionTable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"fetchMentorsPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"registerMentorPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mentor\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_meetingLink\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"scheduleSession\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sessionsAttendedCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sessionsMentoredCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tableName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"ChainNotSupported(uint256)\":[{\"notice\":\"Current chain does not have a TablelandTables deployment.\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LearningSession.sol\":\"LearningSession\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x67ef46fef257faae47adb630aad49694dda0334e5f7a7c5fb386243b974886b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@tableland/evm/contracts/TablelandPolicy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10 <0.9.0;\\n\\n/**\\n * @dev Object defining how a table can be accessed.\\n */\\nstruct TablelandPolicy {\\n    // Whether or not the table should allow SQL INSERT statements.\\n    bool allowInsert;\\n    // Whether or not the table should allow SQL UPDATE statements.\\n    bool allowUpdate;\\n    // Whether or not the table should allow SQL DELETE statements.\\n    bool allowDelete;\\n    // A conditional clause used with SQL UPDATE and DELETE statements.\\n    // For example, a value of \\\"foo > 0\\\" will concatenate all SQL UPDATE\\n    // and/or DELETE statements with \\\"WHERE foo > 0\\\".\\n    // This can be useful for limiting how a table can be modified.\\n    // Use {Policies-joinClauses} to include more than one condition.\\n    string whereClause;\\n    // A conditional clause used with SQL INSERT statements.\\n    // For example, a value of \\\"foo > 0\\\" will concatenate all SQL INSERT\\n    // statements with a check on the incoming data, i.e., \\\"CHECK (foo > 0)\\\".\\n    // This can be useful for limiting how table data ban be added.\\n    // Use {Policies-joinClauses} to include more than one condition.\\n    string withCheck;\\n    // A list of SQL column names that can be updated.\\n    string[] updatableColumns;\\n}\\n\",\"keccak256\":\"0xc7d5e534ced54e7121ab2fbc268c77c708a3ba16c451bd403ba9789ddf1249c0\",\"license\":\"MIT\"},\"@tableland/evm/contracts/interfaces/ITablelandTables.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10 <0.9.0;\\n\\nimport {TablelandPolicy} from \\\"../TablelandPolicy.sol\\\";\\n\\n/**\\n * @dev Interface of a TablelandTables compliant contract.\\n */\\ninterface ITablelandTables {\\n    /**\\n     * The caller is not authorized.\\n     */\\n    error Unauthorized();\\n\\n    /**\\n     * RunSQL was called with a query length greater than maximum allowed.\\n     */\\n    error MaxQuerySizeExceeded(uint256 querySize, uint256 maxQuerySize);\\n\\n    /**\\n     * @dev Emitted when `owner` creates a new table.\\n     *\\n     * owner - the to-be owner of the table\\n     * tableId - the table id of the new table\\n     * statement - the SQL statement used to create the table\\n     */\\n    event CreateTable(address owner, uint256 tableId, string statement);\\n\\n    /**\\n     * @dev Emitted when a table is transferred from `from` to `to`.\\n     *\\n     * Not emmitted when a table is created.\\n     * Also emitted after a table has been burned.\\n     *\\n     * from - the address that transfered the table\\n     * to - the address that received the table\\n     * tableId - the table id that was transferred\\n     */\\n    event TransferTable(address from, address to, uint256 tableId);\\n\\n    /**\\n     * @dev Emitted when `caller` runs a SQL statement.\\n     *\\n     * caller - the address that is running the SQL statement\\n     * isOwner - whether or not the caller is the table owner\\n     * tableId - the id of the target table\\n     * statement - the SQL statement to run\\n     * policy - an object describing how `caller` can interact with the table (see {TablelandPolicy})\\n     */\\n    event RunSQL(\\n        address caller,\\n        bool isOwner,\\n        uint256 tableId,\\n        string statement,\\n        TablelandPolicy policy\\n    );\\n\\n    /**\\n     * @dev Emitted when a table's controller is set.\\n     *\\n     * tableId - the id of the target table\\n     * controller - the address of the controller (EOA or contract)\\n     */\\n    event SetController(uint256 tableId, address controller);\\n\\n    /**\\n     * @dev Struct containing parameters needed to run a mutating sql statement\\n     *\\n     * tableId - the id of the target table\\n     * statement - the SQL statement to run\\n     *           - the statement type can be any of INSERT, UPDATE, DELETE, GRANT, REVOKE\\n     *\\n     */\\n    struct Statement {\\n        uint256 tableId;\\n        string statement;\\n    }\\n\\n    /**\\n     * @dev Creates a new table owned by `owner` using `statement` and returns its `tableId`.\\n     *\\n     * owner - the to-be owner of the new table\\n     * statement - the SQL statement used to create the table\\n     *           - the statement type must be CREATE\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     */\\n    function create(\\n        address owner,\\n        string memory statement\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev Creates multiple new tables owned by `owner` using `statements` and returns array of `tableId`s.\\n     *\\n     * owner - the to-be owner of the new table\\n     * statements - the SQL statements used to create the tables\\n     *            - each statement type must be CREATE\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     */\\n    function create(\\n        address owner,\\n        string[] calldata statements\\n    ) external payable returns (uint256[] memory);\\n\\n    /**\\n     * @dev Runs a mutating SQL statement for `caller` using `statement`.\\n     *\\n     * caller - the address that is running the SQL statement\\n     * tableId - the id of the target table\\n     * statement - the SQL statement to run\\n     *           - the statement type can be any of INSERT, UPDATE, DELETE, GRANT, REVOKE\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller`\\n     * - `tableId` must exist and be the table being mutated\\n     * - `caller` must be authorized by the table controller\\n     * - `statement` must be less than or equal to 35000 bytes\\n     */\\n    function mutate(\\n        address caller,\\n        uint256 tableId,\\n        string calldata statement\\n    ) external payable;\\n\\n    /**\\n     * @dev Runs an array of mutating SQL statements for `caller`\\n     *\\n     * caller - the address that is running the SQL statement\\n     * statements - an array of structs containing the id of the target table and coresponding statement\\n     *            - the statement type can be any of INSERT, UPDATE, DELETE, GRANT, REVOKE\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller`\\n     * - `tableId` must be the table being muated in each struct's statement\\n     * - `caller` must be authorized by the table controller if the statement is mutating\\n     * - each struct inside `statements` must have a `tableId` that corresponds to table being mutated\\n     * - each struct inside `statements` must have a `statement` that is less than or equal to 35000 bytes after normalization\\n     */\\n    function mutate(\\n        address caller,\\n        ITablelandTables.Statement[] calldata statements\\n    ) external payable;\\n\\n    /**\\n     * @dev Sets the controller for a table. Controller can be an EOA or contract address.\\n     *\\n     * When a table is created, it's controller is set to the zero address, which means that the\\n     * contract will not enforce write access control. In this situation, validators will not accept\\n     * transactions from non-owners unless explicitly granted access with \\\"GRANT\\\" SQL statements.\\n     *\\n     * When a controller address is set for a table, validators assume write access control is\\n     * handled at the contract level, and will accept all transactions.\\n     *\\n     * You can unset a controller address for a table by setting it back to the zero address.\\n     * This will cause validators to revert back to honoring owner and GRANT/REVOKE based write access control.\\n     *\\n     * caller - the address that is setting the controller\\n     * tableId - the id of the target table\\n     * controller - the address of the controller (EOA or contract)\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller` and owner of `tableId`\\n     * - `tableId` must exist\\n     * - `tableId` controller must not be locked\\n     */\\n    function setController(\\n        address caller,\\n        uint256 tableId,\\n        address controller\\n    ) external;\\n\\n    /**\\n     * @dev Returns the controller for a table.\\n     *\\n     * tableId - the id of the target table\\n     */\\n    function getController(uint256 tableId) external returns (address);\\n\\n    /**\\n     * @dev Locks the controller for a table _forever_. Controller can be an EOA or contract address.\\n     *\\n     * Although not very useful, it is possible to lock a table controller that is set to the zero address.\\n     *\\n     * caller - the address that is locking the controller\\n     * tableId - the id of the target table\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller` and owner of `tableId`\\n     * - `tableId` must exist\\n     * - `tableId` controller must not be locked\\n     */\\n    function lockController(address caller, uint256 tableId) external;\\n\\n    /**\\n     * @dev Sets the contract base URI.\\n     *\\n     * baseURI - the new base URI\\n     *\\n     * Requirements:\\n     *\\n     * - `msg.sender` must be contract owner\\n     */\\n    function setBaseURI(string memory baseURI) external;\\n\\n    /**\\n     * @dev Pauses the contract.\\n     *\\n     * Requirements:\\n     *\\n     * - `msg.sender` must be contract owner\\n     * - contract must be unpaused\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @dev Unpauses the contract.\\n     *\\n     * Requirements:\\n     *\\n     * - `msg.sender` must be contract owner\\n     * - contract must be paused\\n     */\\n    function unpause() external;\\n}\\n\",\"keccak256\":\"0x1fac08244133826a1c5e745783c4280ba002d6b828eb16d3750d4d5e29afccbb\",\"license\":\"MIT\"},\"@tableland/evm/contracts/utils/SQLHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10 <0.9.0;\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/**\\n * @dev Library of helpers for generating SQL statements from common parameters.\\n */\\nlibrary SQLHelpers {\\n    /**\\n     * @dev Generates a properly formatted table name from a prefix and table id.\\n     *\\n     * prefix - the user generated table prefix as a string\\n     * tableId - the Tableland generated tableId as a uint256\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toNameFromId(\\n        string memory prefix,\\n        uint256 tableId\\n    ) internal view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    prefix,\\n                    \\\"_\\\",\\n                    Strings.toString(block.chainid),\\n                    \\\"_\\\",\\n                    Strings.toString(tableId)\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Generates a CREATE statement based on a desired schema and table prefix.\\n     *\\n     * schema - a comma seperated string indicating the desired prefix. Example: \\\"int id, text name\\\"\\n     * prefix - the user generated table prefix as a string\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toCreateFromSchema(\\n        string memory schema,\\n        string memory prefix\\n    ) internal view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"CREATE TABLE \\\",\\n                    prefix,\\n                    \\\"_\\\",\\n                    Strings.toString(block.chainid),\\n                    \\\"(\\\",\\n                    schema,\\n                    \\\")\\\"\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Generates an INSERT statement based on table prefix, tableId, columns, and values.\\n     *\\n     * prefix - the user generated table prefix as a string.\\n     * tableId - the Tableland generated tableId as a uint256.\\n     * columns - a string encoded ordered list of columns that will be updated. Example: \\\"name, age\\\".\\n     * values - a string encoded ordered list of values that will be inserted wrapped in parentheses. Example: \\\"'jerry', 24\\\". Values order must match column order.\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toInsert(\\n        string memory prefix,\\n        uint256 tableId,\\n        string memory columns,\\n        string memory values\\n    ) internal view returns (string memory) {\\n        string memory name = toNameFromId(prefix, tableId);\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"INSERT INTO \\\",\\n                    name,\\n                    \\\"(\\\",\\n                    columns,\\n                    \\\")VALUES(\\\",\\n                    values,\\n                    \\\")\\\"\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Generates an INSERT statement based on table prefix, tableId, columns, and values.\\n     *\\n     * prefix - the user generated table prefix as a string.\\n     * tableId - the Tableland generated tableId as a uint256.\\n     * columns - a string encoded ordered list of columns that will be updated. Example: \\\"name, age\\\".\\n     * values - an array where each item is a string encoded ordered list of values.\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toBatchInsert(\\n        string memory prefix,\\n        uint256 tableId,\\n        string memory columns,\\n        string[] memory values\\n    ) internal view returns (string memory) {\\n        string memory name = toNameFromId(prefix, tableId);\\n        string memory insert = string(\\n            abi.encodePacked(\\\"INSERT INTO \\\", name, \\\"(\\\", columns, \\\")VALUES\\\")\\n        );\\n        for (uint256 i = 0; i < values.length; i++) {\\n            if (i == 0) {\\n                insert = string(abi.encodePacked(insert, \\\"(\\\", values[i], \\\")\\\"));\\n            } else {\\n                insert = string(abi.encodePacked(insert, \\\",(\\\", values[i], \\\")\\\"));\\n            }\\n        }\\n        return insert;\\n    }\\n\\n    /**\\n     * @dev Generates an Update statement based on table prefix, tableId, setters, and filters.\\n     *\\n     * prefix - the user generated table prefix as a string\\n     * tableId - the Tableland generated tableId as a uint256\\n     * setters - a string encoded set of updates. Example: \\\"name='tom', age=26\\\"\\n     * filters - a string encoded list of filters or \\\"\\\" for no filters. Example: \\\"id<2 and name!='jerry'\\\"\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toUpdate(\\n        string memory prefix,\\n        uint256 tableId,\\n        string memory setters,\\n        string memory filters\\n    ) internal view returns (string memory) {\\n        string memory name = toNameFromId(prefix, tableId);\\n        string memory filter = \\\"\\\";\\n        if (bytes(filters).length > 0) {\\n            filter = string(abi.encodePacked(\\\" WHERE \\\", filters));\\n        }\\n        return\\n            string(abi.encodePacked(\\\"UPDATE \\\", name, \\\" SET \\\", setters, filter));\\n    }\\n\\n    /**\\n     * @dev Generates a Delete statement based on table prefix, tableId, and filters.\\n     *\\n     * prefix - the user generated table prefix as a string.\\n     * tableId - the Tableland generated tableId as a uint256.\\n     * filters - a string encoded list of filters. Example: \\\"id<2 and name!='jerry'\\\".\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toDelete(\\n        string memory prefix,\\n        uint256 tableId,\\n        string memory filters\\n    ) internal view returns (string memory) {\\n        string memory name = toNameFromId(prefix, tableId);\\n        return\\n            string(abi.encodePacked(\\\"DELETE FROM \\\", name, \\\" WHERE \\\", filters));\\n    }\\n\\n    /**\\n     * @dev Add single quotes around a string value\\n     *\\n     * input - any input value.\\n     *\\n     */\\n    function quote(string memory input) internal pure returns (string memory) {\\n        return string(abi.encodePacked(\\\"'\\\", input, \\\"'\\\"));\\n    }\\n}\\n\",\"keccak256\":\"0xcfb69c1bb8dcce6ec512c359fb922db4167a007c8cc8fa84456e4d244afb54e0\",\"license\":\"MIT\"},\"@tableland/evm/contracts/utils/TablelandDeployments.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10 <0.9.0;\\n\\nimport {ITablelandTables} from \\\"../interfaces/ITablelandTables.sol\\\";\\n\\n/**\\n * @dev Helper library for getting an instance of ITablelandTables for the currently executing EVM chain.\\n */\\nlibrary TablelandDeployments {\\n    /**\\n     * Current chain does not have a TablelandTables deployment.\\n     */\\n    error ChainNotSupported(uint256 chainid);\\n\\n    // TablelandTables address on Ethereum.\\n    address internal constant MAINNET =\\n        0x012969f7e3439a9B04025b5a049EB9BAD82A8C12;\\n    // TablelandTables address on Ethereum.\\n    address internal constant HOMESTEAD = MAINNET;\\n    // TablelandTables address on Optimism.\\n    address internal constant OPTIMISM =\\n        0xfad44BF5B843dE943a09D4f3E84949A11d3aa3e6;\\n    // TablelandTables address on Arbitrum One.\\n    address internal constant ARBITRUM =\\n        0x9aBd75E8640871A5a20d3B4eE6330a04c962aFfd;\\n    // TablelandTables address on Arbitrum Nova.\\n    address internal constant ARBITRUM_NOVA =\\n        0x1A22854c5b1642760a827f20137a67930AE108d2;\\n    // TablelandTables address on Polygon.\\n    address internal constant MATIC =\\n        0x5c4e6A9e5C1e1BF445A062006faF19EA6c49aFeA;\\n    // TablelandTables address on Filecoin.\\n    address internal constant FILECOIN =\\n        0x59EF8Bf2d6c102B4c42AEf9189e1a9F0ABfD652d;\\n\\n    // TablelandTables address on Ethereum Sepolia.\\n    address internal constant SEPOLIA =\\n        0xc50C62498448ACc8dBdE43DA77f8D5D2E2c7597D;\\n    // TablelandTables address on Optimism Goerli.\\n    address internal constant OPTIMISM_GOERLI =\\n        0xC72E8a7Be04f2469f8C2dB3F1BdF69A7D516aBbA;\\n    // TablelandTables address on Arbitrum Goerli.\\n    address internal constant ARBITRUM_GOERLI =\\n        0x033f69e8d119205089Ab15D340F5b797732f646b;\\n    // TablelandTables address on Polygon Mumbai.\\n    address internal constant MATICMUM =\\n        0x4b48841d4b32C4650E4ABc117A03FE8B51f38F68;\\n    // TablelandTables address on Filecoin Calibration.\\n    address internal constant FILECOIN_CALIBRATION =\\n        0x030BCf3D50cad04c2e57391B12740982A9308621;\\n\\n    // TablelandTables address on for use with https://github.com/tablelandnetwork/local-tableland.\\n    address internal constant LOCAL_TABLELAND =\\n        0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512;\\n\\n    /**\\n     * @dev Returns an interface to Tableland for the currently executing EVM chain.\\n     *\\n     * The selection order is meant to reduce gas on more expensive chains.\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function get() internal view returns (ITablelandTables) {\\n        if (block.chainid == 1) {\\n            return ITablelandTables(MAINNET);\\n        } else if (block.chainid == 10) {\\n            return ITablelandTables(OPTIMISM);\\n        } else if (block.chainid == 42161) {\\n            return ITablelandTables(ARBITRUM);\\n        } else if (block.chainid == 42170) {\\n            return ITablelandTables(ARBITRUM_NOVA);\\n        } else if (block.chainid == 137) {\\n            return ITablelandTables(MATIC);\\n        } else if (block.chainid == 314) {\\n            return ITablelandTables(FILECOIN);\\n        } else if (block.chainid == 11155111) {\\n            return ITablelandTables(SEPOLIA);\\n        } else if (block.chainid == 420) {\\n            return ITablelandTables(OPTIMISM_GOERLI);\\n        } else if (block.chainid == 421613) {\\n            return ITablelandTables(ARBITRUM_GOERLI);\\n        } else if (block.chainid == 80001) {\\n            return ITablelandTables(MATICMUM);\\n        } else if (block.chainid == 314159) {\\n            return ITablelandTables(FILECOIN_CALIBRATION);\\n        } else if (block.chainid == 31337) {\\n            return ITablelandTables(LOCAL_TABLELAND);\\n        } else {\\n            revert ChainNotSupported(block.chainid);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x29920684b8971cd38b81626677de7be59039437c81f48a9d633bbee028dbc1d4\",\"license\":\"MIT\"},\"contracts/LearningSession.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@tableland/evm/contracts/utils/TablelandDeployments.sol\\\";\\nimport \\\"@tableland/evm/contracts/utils/SQLHelpers.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\n\\ncontract LearningSession is ERC721Holder {\\n    using Counters for Counters.Counter;\\n\\n    Counters.Counter private _sessionID;\\n\\n    event SessionCancelled(uint256 indexed sessionId);\\n    event SessionAccepted(uint256 indexed sessionId);\\n\\n    event SessionScheduled(\\n        address indexed mentor,\\n        address indexed student,\\n        uint256 fee,\\n        uint256 indexed id,\\n        string meetingLink\\n    );\\n\\n    uint256 public _tableId;\\n    string internal _TABLE_PREFIX = \\\"sessionTable\\\";\\n    string public tableName;\\n    address public owner;\\n\\n    struct session {\\n        address student;\\n        address mentor;\\n        uint256 time;\\n        bool isActive;\\n    }\\n\\n    mapping(address => uint) public sessionsAttendedCount;\\n    mapping(address => uint) public sessionsMentoredCount;\\n\\n    mapping (uint256 => session) sessions;\\n    mapping(address => uint) mentorsPrice;\\n\\n    constructor() {\\n        owner = msg.sender;\\n        createSessionTable();\\n    }\\n\\n    function createSessionTable() public {\\n        _tableId = TablelandDeployments.get().create( // creating a table ID\\n            address(this), // setting it's owner to the address for easy write access\\n            SQLHelpers.toCreateFromSchema(\\n                \\\"sessionId integer primary key,\\\" // Notice the trailing comma // the primary key of the table\\n                \\\"mentor text,\\\" // Separate lines for readability\\u2014but it's a single string // value to be added\\n                \\\"student text,\\\"\\n                \\\"isAccepted NUMBER(1),\\\"\\n                \\\"time text,\\\"\\n                \\\"meetingLink text,\\\"\\n                \\\"paymentFee text\\\",\\n                _TABLE_PREFIX // the needed prefix for table (I guess a ttable name)\\n            )\\n        );\\n\\n        tableName = string(\\n                abi.encodePacked(\\n                    _TABLE_PREFIX,\\n                    \\\"_\\\",\\n                    Strings.toString(block.chainid),\\n                    \\\"_\\\",\\n                    Strings.toString(_tableId)\\n                )\\n            );\\n    }\\n\\n    function scheduleSession(\\n        address _mentor,\\n        string memory _meetingLink,\\n        uint256 time) external payable {\\n        require(fetchMentorsPrice(_mentor) != 0, \\\"Invalid Mentor\\\");\\n        require(msg.value >= fetchMentorsPrice(_mentor), \\\"Cant pay mentor\\\");\\n\\n        sessions[_sessionID.current()].time = time;\\n        sessions[_sessionID.current()].isActive = true;\\n\\n        TablelandDeployments.get().mutate(\\n        address(this),\\n        _tableId,\\n        SQLHelpers.toInsert(\\n        _TABLE_PREFIX,\\n        _tableId,\\n        \\\"sessionId,mentor,student,isAccepted,time,meetingLink,paymentFee\\\",\\n        string.concat(\\n            Strings.toString(_sessionID.current()),\\n            \\\",\\\",\\n            SQLHelpers.quote(Strings.toHexString(_mentor)),\\n            \\\",\\\",\\n            SQLHelpers.quote(Strings.toHexString(msg.sender)),\\n            \\\",\\\",\\n            Strings.toString(uint256(0)),\\n            \\\",\\\",\\n            SQLHelpers.quote(Strings.toString(time)),\\n            \\\",\\\",\\n            SQLHelpers.quote(_meetingLink),\\n            \\\",\\\",\\n            SQLHelpers.quote(Strings.toString(msg.value)) // should payment fee == msg.value?\\n        )\\n        )\\n    );\\n\\n    emit SessionScheduled(\\n        _mentor,\\n        msg.sender,\\n        msg.value,\\n        _sessionID.current(),\\n        _meetingLink\\n    );\\n    _sessionID.increment();\\n    }\\n\\n    function fetchMentorsPrice(address _addr) public view returns (uint) {\\n        return mentorsPrice[_addr];\\n    }\\n\\n    function registerMentorPrice(uint _amount) external {\\n        require(_amount != 0, \\\"CAnt set zero amount\\\");\\n        mentorsPrice[msg.sender] = _amount;\\n    }\\n\\n    function cancelSession(uint256 _sessionId) external {\\n        session storage _session = sessions[_sessionId];\\n        require(\\n            _session.student == msg.sender || _session.mentor == msg.sender,\\n            \\\"You are not authorized to make changes to this session\\\"\\n        );\\n            // refund the student\\n            payable(_session.student).transfer(\\n                fetchMentorsPrice(_session.mentor)\\n            );\\n\\n            // make it inactive\\n            _session.isActive = false;\\n\\n        emit SessionCancelled(_sessionId);\\n    }\\n\\n    function acceptSession(uint256 _sessionId) external {\\n        session storage _session = sessions[_sessionId];\\n        require(\\n            _session.mentor == msg.sender,\\n            \\\"You are not the mentor of this session\\\"\\n        );\\n        require(_session.isActive == false, \\\"Already accepted\\\");\\n        _session.isActive = true;\\n        payable(_session.mentor).transfer(fetchMentorsPrice(_session.mentor));\\n        sessionsMentoredCount[_session.mentor] += 1;\\n        sessionsAttendedCount[_session.student] += 1;\\n\\n        // update isAccepted variable in tableland\\n        string memory setters = string.concat(\\\"isAccepted=\\\", \\\"true\\\");\\n        string memory filters = string.concat(\\\"sessionId\\\", SQLHelpers.quote(Strings.toString(_sessionId)));\\n\\n        TablelandDeployments.get().mutate(\\n            address(this),\\n            _tableId,\\n            SQLHelpers.toUpdate(\\n                _TABLE_PREFIX,\\n                _tableId,\\n                setters,\\n                filters\\n            )\\n        );\\n\\n        emit SessionAccepted(_sessionId);\\n    }  \\n\\n}\",\"keccak256\":\"0x0f2eeef90321698afe4fd5a1d35733007cf18d8254c977784d5147efb4a0f42b\",\"license\":\"SEE LICENSE IN LICENSE\"}},\"version\":1}",
  "bytecode": "0x60c0604052600c60809081526b73657373696f6e5461626c6560a01b60a0526002906200002d9082620006c8565b503480156200003b57600080fd5b50600480546001600160a01b03191633179055620000586200005e565b62000a08565b620000736200021560201b62000b601760201c565b6001600160a01b031663a15ab08d30620001446040518060a0016040528060768152602001620028e06076913960028054620000af90620005e1565b80601f0160208091040260200160405190810160405280929190818152602001828054620000dd90620005e1565b80156200012e5780601f1062000102576101008083540402835291602001916200012e565b820191906000526020600020905b8154815290600101906020018083116200011057829003601f168201915b5050505050620003e260201b62000d2f1760201c565b6040518363ffffffff1660e01b81526004016200016392919062000816565b6020604051808303816000875af115801562000183573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001a991906200084a565b6001819055506002620001c7466200042860201b62000d661760201c565b620001df6001546200042860201b62000d661760201c565b604051602001620001f3939291906200091f565b60405160208183030381529060405260039081620002129190620006c8565b50565b60004660010362000239575073012969f7e3439a9b04025b5a049eb9bad82a8c1290565b46600a036200025b575073fad44bf5b843de943a09d4f3e84949a11d3aa3e690565b4661a4b1036200027e5750739abd75e8640871a5a20d3b4ee6330a04c962affd90565b4661a4ba03620002a15750731a22854c5b1642760a827f20137a67930ae108d290565b46608903620002c35750735c4e6a9e5c1e1bf445a062006faf19ea6c49afea90565b4661013a03620002e657507359ef8bf2d6c102b4c42aef9189e1a9f0abfd652d90565b4662aa36a7036200030a575073c50c62498448acc8dbde43da77f8d5d2e2c7597d90565b466101a4036200032d575073c72e8a7be04f2469f8c2db3f1bdf69a7d516abba90565b4662066eed0362000351575073033f69e8d119205089ab15d340f5b797732f646b90565b466201388103620003755750734b48841d4b32c4650e4abc117a03fe8b51f38f6890565b466204cb2f0362000399575073030bcf3d50cad04c2e57391b12740982a930862190565b46617a6903620003bc575073e7f1725e7734ce288f8367e1bb143e90bb3f051290565b4660405163264e42cf60e01b8152600401620003d9919062000973565b60405180910390fd5b606081620003fb466200042860201b62000d661760201c565b846040516020016200041093929190620009a1565b60405160208183030381529060405290505b92915050565b606060006200044283620004cc60201b62000e071760201c565b60010190506000816001600160401b03811115620004645762000464620005b5565b6040519080825280601f01601f1916602001820160405280156200048f576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846200049957509392505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000831062000516577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef8100000000831062000543576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106200056257662386f26fc10000830492506010015b6305f5e10083106200057b576305f5e100830492506008015b61271083106200059057612710830492506004015b60648310620005a3576064830492506002015b600a8310620004225760010192915050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052602260045260246000fd5b600281046001821680620005f657607f821691505b6020821081036200060b576200060b620005cb565b50919050565b6000620004226200061f8381565b90565b6200062d8362000611565b81546008840282811b60001990911b908116901990911617825550505050565b60006200065c81848462000622565b505050565b818110156200068057620006776000826200064d565b60010162000661565b5050565b601f8211156200065c576000818152602090206020601f85010481016020851015620006ad5750805b620006c16020601f86010483018262000661565b5050505050565b81516001600160401b03811115620006e457620006e4620005b5565b620006f08254620005e1565b620006fd82828562000684565b6020601f8311600181146200073457600084156200071b5750858201515b600019600886021c198116600286021786555062000790565b600085815260208120601f198616915b8281101562000766578885015182556020948501946001909201910162000744565b86831015620007835784890151600019601f89166008021c191682555b6001600288020188555050505b505050505050565b60006001600160a01b03821662000422565b620007b58162000798565b82525050565b60005b83811015620007d8578181015183820152602001620007be565b50506000910152565b6000620007ec825190565b80845260208401935062000805818560208601620007bb565b601f01601f19169290920192915050565b60408101620008268285620007aa565b81810360208301526200083a8184620007e1565b949350505050565b805162000422565b600060208284031215620008615762000861600080fd5b60006200083a848462000842565b600081546200087e81620005e1565b600182168015620008985760018114620008ae57620008e0565b60ff1983168652811515820286019350620008e0565b60008581526020902060005b83811015620008d857815488820152600190910190602001620008ba565b838801955050505b50505092915050565b605f60f81b815260005b5060010190565b600062000905825190565b62000915818560208601620007bb565b9290920192915050565b60006200092d82866200086f565b91506200093a82620008e9565b9150620009488285620008fa565b91506200095582620008e9565b9150620009638284620008fa565b95945050505050565b80620007b5565b602081016200042282846200096c565b600560fb1b81526000620008f3565b602960f81b81526000620008f3565b6c021a922a0aa22902a20a126229609d1b8152600d016000620009c58286620008fa565b9150620009d282620008e9565b9150620009e08285620008fa565b9150620009ed8262000983565b9150620009fb8284620008fa565b9150620009638262000992565b611ec88062000a186000396000f3fe6080604052600436106100c75760003560e01c80635a01e62911610074578063b435d1bf1161004e578063b435d1bf1461022f578063e0510ad81461025c578063e27f93701461029257600080fd5b80635a01e629146101b55780636564e5b0146101d55780638da5cb5b1461020257600080fd5b806317c9a24c116100a557806317c9a24c1461015d5780631a7b935f146101805780632dc905f71461019557600080fd5b80630118565f146100cc57806313140aef146100f7578063150b7a021461010c575b600080fd5b3480156100d857600080fd5b506100e16102b2565b6040516100ee9190611217565b60405180910390f35b61010a610105366004611364565b610340565b005b34801561011857600080fd5b506101506101273660046113cf565b7f150b7a0200000000000000000000000000000000000000000000000000000000949350505050565b6040516100ee9190611478565b34801561016957600080fd5b5061017360015481565b6040516100ee919061148c565b34801561018c57600080fd5b5061010a61060d565b3480156101a157600080fd5b5061010a6101b036600461149a565b61077b565b3480156101c157600080fd5b5061010a6101d036600461149a565b6107ad565b3480156101e157600080fd5b506101736101f03660046114bb565b60056020526000908152604090205481565b34801561020e57600080fd5b50600454610222906001600160a01b031681565b6040516100ee91906114e5565b34801561023b57600080fd5b5061017361024a3660046114bb565b60066020526000908152604090205481565b34801561026857600080fd5b506101736102773660046114bb565b6001600160a01b031660009081526008602052604090205490565b34801561029e57600080fd5b5061010a6102ad36600461149a565b610a86565b600380546102bf90611509565b80601f01602080910402602001604051908101604052809291908181526020018280546102eb90611509565b80156103385780601f1061030d57610100808354040283529160200191610338565b820191906000526020600020905b81548152906001019060200180831161031b57829003601f168201915b505050505081565b6001600160a01b0383166000908152600860205260409020546000036103815760405162461bcd60e51b81526004016103789061156c565b60405180910390fd5b6001600160a01b0383166000908152600860205260409020543410156103b95760405162461bcd60e51b8152600401610378906115b0565b80600760006103c760005490565b8152602001908152602001600020600201819055506001600760006103eb60005490565b81526020810191909152604001600020600301805460ff1916911515919091179055610415610b60565b6001600160a01b031663377af0da306001546105546002805461043790611509565b80601f016020809104026020016040519081016040528092919081815260200182805461046390611509565b80156104b05780601f10610485576101008083540402835291602001916104b0565b820191906000526020600020905b81548152906001019060200180831161049357829003601f168201915b50505050506001546040518060600160405280603f8152602001611dde603f91396104e26104dd60005490565b610d66565b6104f36104ee8d610ee9565b610eff565b6104ff6104ee33610ee9565b6105096000610d66565b6105156104ee8e610d66565b61051e8f610eff565b61052a6104ee34610d66565b60405160200161054097969594939291906115e2565b604051602081830303815290604052610f28565b6040518463ffffffff1660e01b81526004016105729392919061167f565b600060405180830381600087803b15801561058c57600080fd5b505af11580156105a0573d6000803e3d6000fd5b505050506105ad60005490565b336001600160a01b0316846001600160a01b03167f213b630533ad25ce61101835b0a209f87d24b7edcb72b10ab399bc7ce135f5e434866040516105f29291906116b5565b60405180910390a4610608600080546001019055565b505050565b610615610b60565b6001600160a01b031663a15ab08d306106d06040518060a0016040528060768152602001611e1d607691396002805461064d90611509565b80601f016020809104026020016040519081016040528092919081815260200182805461067990611509565b80156106c65780601f1061069b576101008083540402835291602001916106c6565b820191906000526020600020905b8154815290600101906020018083116106a957829003601f168201915b5050505050610d2f565b6040518363ffffffff1660e01b81526004016106ed9291906116d5565b6020604051808303816000875af115801561070c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073091906116ee565b600155600261073e46610d66565b610749600154610d66565b60405160200161075b939291906117ae565b60405160208183030381529060405260039081610778919061188c565b50565b8060000361079b5760405162461bcd60e51b815260040161037890611984565b33600090815260086020526040902055565b600081815260076020526040902060018101546001600160a01b031633146107e75760405162461bcd60e51b8152600401610378906119f1565b600381015460ff161561080c5760405162461bcd60e51b815260040161037890611a35565b60038101805460ff191660019081179091558101546001600160a01b03166000818152600860205260408082205490516108fc82150292818181858888f19350505050158015610860573d6000803e3d6000fd5b506001818101546001600160a01b03166000908152600660205260408120805490919061088e908490611a5b565b909155505080546001600160a01b031660009081526005602052604081208054600192906108bd908490611a5b565b9091555050604080517f697341636365707465643d00000000000000000000000000000000000000000060208201527f7472756500000000000000000000000000000000000000000000000000000000602b8201528151600f818303018152602f90910190915260006109326104ee85610d66565b6040516020016109429190611a6e565b604051602081830303815290604052905061095b610b60565b6001600160a01b031663377af0da30600154610a056002805461097d90611509565b80601f01602080910402602001604051908101604052809291908181526020018280546109a990611509565b80156109f65780601f106109cb576101008083540402835291602001916109f6565b820191906000526020600020905b8154815290600101906020018083116109d957829003601f168201915b50505050506001548888610f67565b6040518463ffffffff1660e01b8152600401610a239392919061167f565b600060405180830381600087803b158015610a3d57600080fd5b505af1158015610a51573d6000803e3d6000fd5b50506040518692507fa8e222f86c5c12a635a413c7ff6fc4f543bdabcaaa7a0048a6e1913faac449679150600090a250505050565b600081815260076020526040902080546001600160a01b0316331480610ab8575060018101546001600160a01b031633145b610ad45760405162461bcd60e51b815260040161037890611afa565b805460018201546001600160a01b039081166000908152600860205260409020549116906108fc906040518115909202916000818181858888f19350505050158015610b24573d6000803e3d6000fd5b5060038101805460ff1916905560405182907f83db11557caa3518e394ee3589033b042b4f03f0ed0495a829208e71bfa37f0590600090a25050565b600046600103610b83575073012969f7e3439a9b04025b5a049eb9bad82a8c1290565b46600a03610ba4575073fad44bf5b843de943a09d4f3e84949a11d3aa3e690565b4661a4b103610bc65750739abd75e8640871a5a20d3b4ee6330a04c962affd90565b4661a4ba03610be85750731a22854c5b1642760a827f20137a67930ae108d290565b46608903610c095750735c4e6a9e5c1e1bf445a062006faf19ea6c49afea90565b4661013a03610c2b57507359ef8bf2d6c102b4c42aef9189e1a9f0abfd652d90565b4662aa36a703610c4e575073c50c62498448acc8dbde43da77f8d5d2e2c7597d90565b466101a403610c70575073c72e8a7be04f2469f8c2db3f1bdf69a7d516abba90565b4662066eed03610c93575073033f69e8d119205089ab15d340f5b797732f646b90565b466201388103610cb65750734b48841d4b32c4650e4abc117a03fe8b51f38f6890565b466204cb2f03610cd9575073030bcf3d50cad04c2e57391b12740982a930862190565b46617a6903610cfb575073e7f1725e7734ce288f8367e1bb143e90bb3f051290565b466040517f264e42cf000000000000000000000000000000000000000000000000000000008152600401610378919061148c565b606081610d3b46610d66565b84604051602001610d4e93929190611b5e565b60405160208183030381529060405290505b92915050565b60606000610d7383610e07565b600101905060008167ffffffffffffffff811115610d9357610d93611258565b6040519080825280601f01601f191660200182016040528015610dbd576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8504945084610dc7575b509392505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310610e50577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310610e7c576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310610e9a57662386f26fc10000830492506010015b6305f5e1008310610eb2576305f5e100830492506008015b6127108310610ec657612710830492506004015b60648310610ed8576064830492506002015b600a8310610d605760010192915050565b6060610d606001600160a01b0383166014610fe2565b606081604051602001610f129190611bf3565b6040516020818303038152906040529050919050565b60606000610f36868661119a565b9050808484604051602001610f4d93929190611c15565b604051602081830303815290604052915050949350505050565b60606000610f75868661119a565b60408051602081019091526000815284519192509015610fb25783604051602001610fa09190611cb9565b60405160208183030381529060405290505b818582604051602001610fc793929190611cfa565b60405160208183030381529060405292505050949350505050565b60606000610ff1836002611d43565b610ffc906002611a5b565b67ffffffffffffffff81111561101457611014611258565b6040519080825280601f01601f19166020018201604052801561103e576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061107557611075611d62565b60200101906001600160f81b031916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106110c0576110c0611d62565b60200101906001600160f81b031916908160001a90535060006110e4846002611d43565b6110ef906001611a5b565b90505b6001811115611174577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061113057611130611d62565b1a60f81b82828151811061114657611146611d62565b60200101906001600160f81b031916908160001a90535060049490941c9361116d81611d78565b90506110f2565b5083156111935760405162461bcd60e51b815260040161037890611dc1565b9392505050565b6060826111a646610d66565b6111af84610d66565b604051602001610d4e93929190611dd1565b60005b838110156111dc5781810151838201526020016111c4565b50506000910152565b60006111ef825190565b8084526020840193506112068185602086016111c1565b601f01601f19169290920192915050565b6020808252810161119381846111e5565b60006001600160a01b038216610d60565b61124281611228565b811461077857600080fd5b8035610d6081611239565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff8211171561129457611294611258565b6040525050565b60006112a660405190565b90506112b2828261126e565b919050565b600067ffffffffffffffff8211156112d1576112d1611258565b601f19601f83011660200192915050565b82818337506000910152565b60006113016112fc846112b7565b61129b565b90508281526020810184848401111561131c5761131c600080fd5b610dff8482856112e2565b600082601f83011261133b5761133b600080fd5b813561134b8482602086016112ee565b949350505050565b80611242565b8035610d6081611353565b60008060006060848603121561137c5761137c600080fd5b6000611388868661124d565b935050602084013567ffffffffffffffff8111156113a8576113a8600080fd5b6113b486828701611327565b92505060406113c586828701611359565b9150509250925092565b600080600080608085870312156113e8576113e8600080fd5b60006113f4878761124d565b94505060206114058782880161124d565b935050604061141687828801611359565b925050606085013567ffffffffffffffff81111561143657611436600080fd5b61144287828801611327565b91505092959194509250565b7fffffffff0000000000000000000000000000000000000000000000000000000081165b82525050565b60208101610d60828461144e565b80611472565b60208101610d608284611486565b6000602082840312156114af576114af600080fd5b600061134b8484611359565b6000602082840312156114d0576114d0600080fd5b600061134b848461124d565b61147281611228565b60208101610d6082846114dc565b634e487b7160e01b600052602260045260246000fd5b60028104600182168061151d57607f821691505b60208210810361152f5761152f6114f3565b50919050565b600e81526000602082017f496e76616c6964204d656e746f72000000000000000000000000000000000000815291505b5060200190565b60208082528101610d6081611535565b600f81526000602082017f43616e7420706179206d656e746f72000000000000000000000000000000000081529150611565565b60208082528101610d608161157c565b60006115ca825190565b6115d88185602086016111c1565b9290920192915050565b60006115ee828a6115c0565b600b60fa1b8152600101915061160482896115c0565b600b60fa1b8152600101915061161a82886115c0565b600b60fa1b8152600101915061163082876115c0565b600b60fa1b8152600101915061164682866115c0565b600b60fa1b8152600101915061165c82856115c0565b600b60fa1b8152600101915061167282846115c0565b9998505050505050505050565b6060810161168d82866114dc565b61169a6020830185611486565b81810360408301526116ac81846111e5565b95945050505050565b604081016116c38285611486565b818103602083015261134b81846111e5565b604081016116c382856114dc565b8051610d6081611353565b60006020828403121561170357611703600080fd5b600061134b84846116e3565b6000815461171c81611509565b600182168015611733576001811461174857611778565b60ff1983168652811515820286019350611778565b60008581526020902060005b8381101561177057815488820152600190910190602001611754565b838801955050505b50505092915050565b7f5f00000000000000000000000000000000000000000000000000000000000000815260005b5060010190565b60006117ba828661170f565b91506117c582611781565b91506117d182856115c0565b91506117dc82611781565b91506116ac82846115c0565b6000610d606117f48381565b90565b611800836117e8565b81546008840282811b60001990911b908116901990911617825550505050565b60006106088184846117f7565b8181101561184857611840600082611820565b60010161182d565b5050565b601f821115610608576000818152602090206020601f850104810160208510156118735750805b6118856020601f86010483018261182d565b5050505050565b815167ffffffffffffffff8111156118a6576118a6611258565b6118b08254611509565b6118bb82828561184c565b6020601f8311600181146118ef57600084156118d75750858201515b600019600886021c1981166002860217865550611948565b600085815260208120601f198616915b8281101561191f57888501518255602094850194600190920191016118ff565b8683101561193b5784890151600019601f89166008021c191682555b6001600288020188555050505b505050505050565b601481526000602082017f43416e7420736574207a65726f20616d6f756e7400000000000000000000000081529150611565565b60208082528101610d6081611950565b602681526000602082017f596f7520617265206e6f7420746865206d656e746f72206f662074686973207381527f657373696f6e0000000000000000000000000000000000000000000000000000602082015291505b5060400190565b60208082528101610d6081611994565b601081526000602082017f416c72656164792061636365707465640000000000000000000000000000000081529150611565565b60208082528101610d6081611a01565b634e487b7160e01b600052601160045260246000fd5b80820180821115610d6057610d60611a45565b7f73657373696f6e496400000000000000000000000000000000000000000000008152600901600061119382846115c0565b603681526000602082017f596f7520617265206e6f7420617574686f72697a656420746f206d616b65206381527f68616e67657320746f20746869732073657373696f6e00000000000000000000602082015291506119ea565b60208082528101610d6081611aa0565b7f2800000000000000000000000000000000000000000000000000000000000000815260006117a7565b7f2900000000000000000000000000000000000000000000000000000000000000815260006117a7565b7f435245415445205441424c4520000000000000000000000000000000000000008152600d016000611b9082866115c0565b9150611b9b82611781565b9150611ba782856115c0565b9150611bb282611b0a565b9150611bbe82846115c0565b91506116ac82611b34565b7f2700000000000000000000000000000000000000000000000000000000000000815260006117a7565b6000611bfe82611bc9565b9150611c0a82846115c0565b915061119382611bc9565b7f494e5345525420494e544f2000000000000000000000000000000000000000008152600c016000611c4782866115c0565b9150611c5282611b0a565b9150611c5e82856115c0565b7f2956414c554553280000000000000000000000000000000000000000000000008152915060088201611bb2565b7f2057484552452000000000000000000000000000000000000000000000000000815260005b5060070190565b6000611cc482611c8c565b915061119382846115c0565b7f555044415445200000000000000000000000000000000000000000000000000081526000611cb2565b6000611d0582611cd0565b9150611d1182866115c0565b7f2053455420000000000000000000000000000000000000000000000000000000815260050191506117dc82856115c0565b818102808215838204851417611d5b57611d5b611a45565b5092915050565b634e487b7160e01b600052603260045260246000fd5b600081611d8757611d87611a45565b506000190190565b60208082527f537472696e67733a20686578206c656e67746820696e73756666696369656e7491019081526000611565565b60208082528101610d6081611d8f565b60006117ba82866115c056fe73657373696f6e49642c6d656e746f722c73747564656e742c697341636365707465642c74696d652c6d656574696e674c696e6b2c7061796d656e7446656573657373696f6e496420696e7465676572207072696d617279206b65792c6d656e746f7220746578742c73747564656e7420746578742c69734163636570746564204e554d4245522831292c74696d6520746578742c6d656574696e674c696e6b20746578742c7061796d656e744665652074657874a26469706673582212201a4ab80d15b17f76da38da2809e4aa45b7f4cfa7bc34094463de410cbbad29ef64736f6c6343000811003373657373696f6e496420696e7465676572207072696d617279206b65792c6d656e746f7220746578742c73747564656e7420746578742c69734163636570746564204e554d4245522831292c74696d6520746578742c6d656574696e674c696e6b20746578742c7061796d656e744665652074657874",
  "deployedBytecode": "0x6080604052600436106100c75760003560e01c80635a01e62911610074578063b435d1bf1161004e578063b435d1bf1461022f578063e0510ad81461025c578063e27f93701461029257600080fd5b80635a01e629146101b55780636564e5b0146101d55780638da5cb5b1461020257600080fd5b806317c9a24c116100a557806317c9a24c1461015d5780631a7b935f146101805780632dc905f71461019557600080fd5b80630118565f146100cc57806313140aef146100f7578063150b7a021461010c575b600080fd5b3480156100d857600080fd5b506100e16102b2565b6040516100ee9190611217565b60405180910390f35b61010a610105366004611364565b610340565b005b34801561011857600080fd5b506101506101273660046113cf565b7f150b7a0200000000000000000000000000000000000000000000000000000000949350505050565b6040516100ee9190611478565b34801561016957600080fd5b5061017360015481565b6040516100ee919061148c565b34801561018c57600080fd5b5061010a61060d565b3480156101a157600080fd5b5061010a6101b036600461149a565b61077b565b3480156101c157600080fd5b5061010a6101d036600461149a565b6107ad565b3480156101e157600080fd5b506101736101f03660046114bb565b60056020526000908152604090205481565b34801561020e57600080fd5b50600454610222906001600160a01b031681565b6040516100ee91906114e5565b34801561023b57600080fd5b5061017361024a3660046114bb565b60066020526000908152604090205481565b34801561026857600080fd5b506101736102773660046114bb565b6001600160a01b031660009081526008602052604090205490565b34801561029e57600080fd5b5061010a6102ad36600461149a565b610a86565b600380546102bf90611509565b80601f01602080910402602001604051908101604052809291908181526020018280546102eb90611509565b80156103385780601f1061030d57610100808354040283529160200191610338565b820191906000526020600020905b81548152906001019060200180831161031b57829003601f168201915b505050505081565b6001600160a01b0383166000908152600860205260409020546000036103815760405162461bcd60e51b81526004016103789061156c565b60405180910390fd5b6001600160a01b0383166000908152600860205260409020543410156103b95760405162461bcd60e51b8152600401610378906115b0565b80600760006103c760005490565b8152602001908152602001600020600201819055506001600760006103eb60005490565b81526020810191909152604001600020600301805460ff1916911515919091179055610415610b60565b6001600160a01b031663377af0da306001546105546002805461043790611509565b80601f016020809104026020016040519081016040528092919081815260200182805461046390611509565b80156104b05780601f10610485576101008083540402835291602001916104b0565b820191906000526020600020905b81548152906001019060200180831161049357829003601f168201915b50505050506001546040518060600160405280603f8152602001611dde603f91396104e26104dd60005490565b610d66565b6104f36104ee8d610ee9565b610eff565b6104ff6104ee33610ee9565b6105096000610d66565b6105156104ee8e610d66565b61051e8f610eff565b61052a6104ee34610d66565b60405160200161054097969594939291906115e2565b604051602081830303815290604052610f28565b6040518463ffffffff1660e01b81526004016105729392919061167f565b600060405180830381600087803b15801561058c57600080fd5b505af11580156105a0573d6000803e3d6000fd5b505050506105ad60005490565b336001600160a01b0316846001600160a01b03167f213b630533ad25ce61101835b0a209f87d24b7edcb72b10ab399bc7ce135f5e434866040516105f29291906116b5565b60405180910390a4610608600080546001019055565b505050565b610615610b60565b6001600160a01b031663a15ab08d306106d06040518060a0016040528060768152602001611e1d607691396002805461064d90611509565b80601f016020809104026020016040519081016040528092919081815260200182805461067990611509565b80156106c65780601f1061069b576101008083540402835291602001916106c6565b820191906000526020600020905b8154815290600101906020018083116106a957829003601f168201915b5050505050610d2f565b6040518363ffffffff1660e01b81526004016106ed9291906116d5565b6020604051808303816000875af115801561070c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073091906116ee565b600155600261073e46610d66565b610749600154610d66565b60405160200161075b939291906117ae565b60405160208183030381529060405260039081610778919061188c565b50565b8060000361079b5760405162461bcd60e51b815260040161037890611984565b33600090815260086020526040902055565b600081815260076020526040902060018101546001600160a01b031633146107e75760405162461bcd60e51b8152600401610378906119f1565b600381015460ff161561080c5760405162461bcd60e51b815260040161037890611a35565b60038101805460ff191660019081179091558101546001600160a01b03166000818152600860205260408082205490516108fc82150292818181858888f19350505050158015610860573d6000803e3d6000fd5b506001818101546001600160a01b03166000908152600660205260408120805490919061088e908490611a5b565b909155505080546001600160a01b031660009081526005602052604081208054600192906108bd908490611a5b565b9091555050604080517f697341636365707465643d00000000000000000000000000000000000000000060208201527f7472756500000000000000000000000000000000000000000000000000000000602b8201528151600f818303018152602f90910190915260006109326104ee85610d66565b6040516020016109429190611a6e565b604051602081830303815290604052905061095b610b60565b6001600160a01b031663377af0da30600154610a056002805461097d90611509565b80601f01602080910402602001604051908101604052809291908181526020018280546109a990611509565b80156109f65780601f106109cb576101008083540402835291602001916109f6565b820191906000526020600020905b8154815290600101906020018083116109d957829003601f168201915b50505050506001548888610f67565b6040518463ffffffff1660e01b8152600401610a239392919061167f565b600060405180830381600087803b158015610a3d57600080fd5b505af1158015610a51573d6000803e3d6000fd5b50506040518692507fa8e222f86c5c12a635a413c7ff6fc4f543bdabcaaa7a0048a6e1913faac449679150600090a250505050565b600081815260076020526040902080546001600160a01b0316331480610ab8575060018101546001600160a01b031633145b610ad45760405162461bcd60e51b815260040161037890611afa565b805460018201546001600160a01b039081166000908152600860205260409020549116906108fc906040518115909202916000818181858888f19350505050158015610b24573d6000803e3d6000fd5b5060038101805460ff1916905560405182907f83db11557caa3518e394ee3589033b042b4f03f0ed0495a829208e71bfa37f0590600090a25050565b600046600103610b83575073012969f7e3439a9b04025b5a049eb9bad82a8c1290565b46600a03610ba4575073fad44bf5b843de943a09d4f3e84949a11d3aa3e690565b4661a4b103610bc65750739abd75e8640871a5a20d3b4ee6330a04c962affd90565b4661a4ba03610be85750731a22854c5b1642760a827f20137a67930ae108d290565b46608903610c095750735c4e6a9e5c1e1bf445a062006faf19ea6c49afea90565b4661013a03610c2b57507359ef8bf2d6c102b4c42aef9189e1a9f0abfd652d90565b4662aa36a703610c4e575073c50c62498448acc8dbde43da77f8d5d2e2c7597d90565b466101a403610c70575073c72e8a7be04f2469f8c2db3f1bdf69a7d516abba90565b4662066eed03610c93575073033f69e8d119205089ab15d340f5b797732f646b90565b466201388103610cb65750734b48841d4b32c4650e4abc117a03fe8b51f38f6890565b466204cb2f03610cd9575073030bcf3d50cad04c2e57391b12740982a930862190565b46617a6903610cfb575073e7f1725e7734ce288f8367e1bb143e90bb3f051290565b466040517f264e42cf000000000000000000000000000000000000000000000000000000008152600401610378919061148c565b606081610d3b46610d66565b84604051602001610d4e93929190611b5e565b60405160208183030381529060405290505b92915050565b60606000610d7383610e07565b600101905060008167ffffffffffffffff811115610d9357610d93611258565b6040519080825280601f01601f191660200182016040528015610dbd576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8504945084610dc7575b509392505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310610e50577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310610e7c576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310610e9a57662386f26fc10000830492506010015b6305f5e1008310610eb2576305f5e100830492506008015b6127108310610ec657612710830492506004015b60648310610ed8576064830492506002015b600a8310610d605760010192915050565b6060610d606001600160a01b0383166014610fe2565b606081604051602001610f129190611bf3565b6040516020818303038152906040529050919050565b60606000610f36868661119a565b9050808484604051602001610f4d93929190611c15565b604051602081830303815290604052915050949350505050565b60606000610f75868661119a565b60408051602081019091526000815284519192509015610fb25783604051602001610fa09190611cb9565b60405160208183030381529060405290505b818582604051602001610fc793929190611cfa565b60405160208183030381529060405292505050949350505050565b60606000610ff1836002611d43565b610ffc906002611a5b565b67ffffffffffffffff81111561101457611014611258565b6040519080825280601f01601f19166020018201604052801561103e576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061107557611075611d62565b60200101906001600160f81b031916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106110c0576110c0611d62565b60200101906001600160f81b031916908160001a90535060006110e4846002611d43565b6110ef906001611a5b565b90505b6001811115611174577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061113057611130611d62565b1a60f81b82828151811061114657611146611d62565b60200101906001600160f81b031916908160001a90535060049490941c9361116d81611d78565b90506110f2565b5083156111935760405162461bcd60e51b815260040161037890611dc1565b9392505050565b6060826111a646610d66565b6111af84610d66565b604051602001610d4e93929190611dd1565b60005b838110156111dc5781810151838201526020016111c4565b50506000910152565b60006111ef825190565b8084526020840193506112068185602086016111c1565b601f01601f19169290920192915050565b6020808252810161119381846111e5565b60006001600160a01b038216610d60565b61124281611228565b811461077857600080fd5b8035610d6081611239565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff8211171561129457611294611258565b6040525050565b60006112a660405190565b90506112b2828261126e565b919050565b600067ffffffffffffffff8211156112d1576112d1611258565b601f19601f83011660200192915050565b82818337506000910152565b60006113016112fc846112b7565b61129b565b90508281526020810184848401111561131c5761131c600080fd5b610dff8482856112e2565b600082601f83011261133b5761133b600080fd5b813561134b8482602086016112ee565b949350505050565b80611242565b8035610d6081611353565b60008060006060848603121561137c5761137c600080fd5b6000611388868661124d565b935050602084013567ffffffffffffffff8111156113a8576113a8600080fd5b6113b486828701611327565b92505060406113c586828701611359565b9150509250925092565b600080600080608085870312156113e8576113e8600080fd5b60006113f4878761124d565b94505060206114058782880161124d565b935050604061141687828801611359565b925050606085013567ffffffffffffffff81111561143657611436600080fd5b61144287828801611327565b91505092959194509250565b7fffffffff0000000000000000000000000000000000000000000000000000000081165b82525050565b60208101610d60828461144e565b80611472565b60208101610d608284611486565b6000602082840312156114af576114af600080fd5b600061134b8484611359565b6000602082840312156114d0576114d0600080fd5b600061134b848461124d565b61147281611228565b60208101610d6082846114dc565b634e487b7160e01b600052602260045260246000fd5b60028104600182168061151d57607f821691505b60208210810361152f5761152f6114f3565b50919050565b600e81526000602082017f496e76616c6964204d656e746f72000000000000000000000000000000000000815291505b5060200190565b60208082528101610d6081611535565b600f81526000602082017f43616e7420706179206d656e746f72000000000000000000000000000000000081529150611565565b60208082528101610d608161157c565b60006115ca825190565b6115d88185602086016111c1565b9290920192915050565b60006115ee828a6115c0565b600b60fa1b8152600101915061160482896115c0565b600b60fa1b8152600101915061161a82886115c0565b600b60fa1b8152600101915061163082876115c0565b600b60fa1b8152600101915061164682866115c0565b600b60fa1b8152600101915061165c82856115c0565b600b60fa1b8152600101915061167282846115c0565b9998505050505050505050565b6060810161168d82866114dc565b61169a6020830185611486565b81810360408301526116ac81846111e5565b95945050505050565b604081016116c38285611486565b818103602083015261134b81846111e5565b604081016116c382856114dc565b8051610d6081611353565b60006020828403121561170357611703600080fd5b600061134b84846116e3565b6000815461171c81611509565b600182168015611733576001811461174857611778565b60ff1983168652811515820286019350611778565b60008581526020902060005b8381101561177057815488820152600190910190602001611754565b838801955050505b50505092915050565b7f5f00000000000000000000000000000000000000000000000000000000000000815260005b5060010190565b60006117ba828661170f565b91506117c582611781565b91506117d182856115c0565b91506117dc82611781565b91506116ac82846115c0565b6000610d606117f48381565b90565b611800836117e8565b81546008840282811b60001990911b908116901990911617825550505050565b60006106088184846117f7565b8181101561184857611840600082611820565b60010161182d565b5050565b601f821115610608576000818152602090206020601f850104810160208510156118735750805b6118856020601f86010483018261182d565b5050505050565b815167ffffffffffffffff8111156118a6576118a6611258565b6118b08254611509565b6118bb82828561184c565b6020601f8311600181146118ef57600084156118d75750858201515b600019600886021c1981166002860217865550611948565b600085815260208120601f198616915b8281101561191f57888501518255602094850194600190920191016118ff565b8683101561193b5784890151600019601f89166008021c191682555b6001600288020188555050505b505050505050565b601481526000602082017f43416e7420736574207a65726f20616d6f756e7400000000000000000000000081529150611565565b60208082528101610d6081611950565b602681526000602082017f596f7520617265206e6f7420746865206d656e746f72206f662074686973207381527f657373696f6e0000000000000000000000000000000000000000000000000000602082015291505b5060400190565b60208082528101610d6081611994565b601081526000602082017f416c72656164792061636365707465640000000000000000000000000000000081529150611565565b60208082528101610d6081611a01565b634e487b7160e01b600052601160045260246000fd5b80820180821115610d6057610d60611a45565b7f73657373696f6e496400000000000000000000000000000000000000000000008152600901600061119382846115c0565b603681526000602082017f596f7520617265206e6f7420617574686f72697a656420746f206d616b65206381527f68616e67657320746f20746869732073657373696f6e00000000000000000000602082015291506119ea565b60208082528101610d6081611aa0565b7f2800000000000000000000000000000000000000000000000000000000000000815260006117a7565b7f2900000000000000000000000000000000000000000000000000000000000000815260006117a7565b7f435245415445205441424c4520000000000000000000000000000000000000008152600d016000611b9082866115c0565b9150611b9b82611781565b9150611ba782856115c0565b9150611bb282611b0a565b9150611bbe82846115c0565b91506116ac82611b34565b7f2700000000000000000000000000000000000000000000000000000000000000815260006117a7565b6000611bfe82611bc9565b9150611c0a82846115c0565b915061119382611bc9565b7f494e5345525420494e544f2000000000000000000000000000000000000000008152600c016000611c4782866115c0565b9150611c5282611b0a565b9150611c5e82856115c0565b7f2956414c554553280000000000000000000000000000000000000000000000008152915060088201611bb2565b7f2057484552452000000000000000000000000000000000000000000000000000815260005b5060070190565b6000611cc482611c8c565b915061119382846115c0565b7f555044415445200000000000000000000000000000000000000000000000000081526000611cb2565b6000611d0582611cd0565b9150611d1182866115c0565b7f2053455420000000000000000000000000000000000000000000000000000000815260050191506117dc82856115c0565b818102808215838204851417611d5b57611d5b611a45565b5092915050565b634e487b7160e01b600052603260045260246000fd5b600081611d8757611d87611a45565b506000190190565b60208082527f537472696e67733a20686578206c656e67746820696e73756666696369656e7491019081526000611565565b60208082528101610d6081611d8f565b60006117ba82866115c056fe73657373696f6e49642c6d656e746f722c73747564656e742c697341636365707465642c74696d652c6d656574696e674c696e6b2c7061796d656e7446656573657373696f6e496420696e7465676572207072696d617279206b65792c6d656e746f7220746578742c73747564656e7420746578742c69734163636570746564204e554d4245522831292c74696d6520746578742c6d656574696e674c696e6b20746578742c7061796d656e744665652074657874a26469706673582212201a4ab80d15b17f76da38da2809e4aa45b7f4cfa7bc34094463de410cbbad29ef64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ChainNotSupported(uint256)": [
        {
          "notice": "Current chain does not have a TablelandTables deployment."
        }
      ]
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2491,
        "contract": "contracts/LearningSession.sol:LearningSession",
        "label": "_sessionID",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(Counter)50_storage"
      },
      {
        "astId": 2513,
        "contract": "contracts/LearningSession.sol:LearningSession",
        "label": "_tableId",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2516,
        "contract": "contracts/LearningSession.sol:LearningSession",
        "label": "_TABLE_PREFIX",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 2518,
        "contract": "contracts/LearningSession.sol:LearningSession",
        "label": "tableName",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 2520,
        "contract": "contracts/LearningSession.sol:LearningSession",
        "label": "owner",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 2533,
        "contract": "contracts/LearningSession.sol:LearningSession",
        "label": "sessionsAttendedCount",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2537,
        "contract": "contracts/LearningSession.sol:LearningSession",
        "label": "sessionsMentoredCount",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2542,
        "contract": "contracts/LearningSession.sol:LearningSession",
        "label": "sessions",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(session)2529_storage)"
      },
      {
        "astId": 2546,
        "contract": "contracts/LearningSession.sol:LearningSession",
        "label": "mentorsPrice",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(session)2529_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LearningSession.session)",
        "numberOfBytes": "32",
        "value": "t_struct(session)2529_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)50_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 49,
            "contract": "contracts/LearningSession.sol:LearningSession",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(session)2529_storage": {
        "encoding": "inplace",
        "label": "struct LearningSession.session",
        "members": [
          {
            "astId": 2522,
            "contract": "contracts/LearningSession.sol:LearningSession",
            "label": "student",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2524,
            "contract": "contracts/LearningSession.sol:LearningSession",
            "label": "mentor",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 2526,
            "contract": "contracts/LearningSession.sol:LearningSession",
            "label": "time",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2528,
            "contract": "contracts/LearningSession.sol:LearningSession",
            "label": "isActive",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}